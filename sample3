This is cutadapt 1.18 with Python 3.5.6
Command line parameters: -a TGAAGCGGCGCACGAAAAACGCGAAAGCGTTTCAC -a TGGTCATGTGGAGACGCTGGG -a ATCACGGACTGCCCATAGAGAGGCTCTGG -j 10 -O 5 -o /bios-store5/lyt/test_sample/sample3//R1.cutadapt.fastq /bios-store5/lyt/test_sample/sample3//correct_R1.fastq
Processing reads on 10 cores in single-end mode ...
Finished in 37.09 s (5 us/read; 12.89 M reads/minute).

=== Summary ===

Total reads processed:               7,967,522
Reads with adapters:                 5,148,396 (64.6%)
Reads written (passing filters):     7,967,522 (100.0%)

Total basepairs processed: 1,195,128,300 bp
Total written (filtered):    874,483,859 bp (73.2%)

=== Adapter 1 ===

Sequence: TGAAGCGGCGCACGAAAAACGCGAAAGCGTTTCAC; Type: regular 3'; Length: 35; Trimmed: 5072803 times.

No. of allowed errors:
0-9 bp: 0; 10-19 bp: 1; 20-29 bp: 2; 30-35 bp: 3

Bases preceding removed adapters:
  A: 25.6%
  C: 18.2%
  G: 22.1%
  T: 34.1%
  none/other: 0.0%

Overview of removed sequences
length	count	expect	max.err	error counts
5	34181	7780.8	0	34181
6	28716	1945.2	0	28716
7	29869	486.3	0	29869
8	27300	121.6	0	27300
9	28542	30.4	0	28485 57
10	33146	7.6	1	31881 1265
11	32049	1.9	1	30886 1163
12	34643	0.5	1	33343 1300
13	37945	0.1	1	36412 1533
14	34495	0.0	1	33092 1403
15	34171	0.0	1	32911 1260
16	35569	0.0	1	34175 1394
17	31450	0.0	1	30211 1239
18	31592	0.0	1	30298 1286 8
19	34391	0.0	1	32912 1464 15
20	32547	0.0	2	30894 1356 297
21	35046	0.0	2	33125 1584 337
22	39820	0.0	2	37563 1780 477
23	38363	0.0	2	36289 1686 388
24	39392	0.0	2	37172 1794 426
25	41704	0.0	2	39348 1930 426
26	37192	0.0	2	35063 1736 393
27	36116	0.0	2	33980 1702 406 28
28	38712	0.0	2	36460 1809 442 1
29	34819	0.0	2	32941 1524 343 11
30	35542	0.0	3	33401 1626 364 151
31	40240	0.0	3	37712 1911 424 193
32	39387	0.0	3	36967 1847 363 210
33	42397	0.0	3	39635 2067 463 232
34	47060	0.0	3	43965 2319 516 260
35	43038	0.0	3	40233 2140 458 207
36	42442	0.0	3	39638 2137 431 236
37	43809	0.0	3	41104 2091 398 216
38	39364	0.0	3	36951 1889 360 164
39	38870	0.0	3	36361 1918 387 204
40	41604	0.0	3	39102 1955 357 190
41	39200	0.0	3	36718 1927 366 189
42	41853	0.0	3	39344 1901 413 195
43	48329	0.0	3	45506 2208 427 188
44	47027	0.0	3	44189 2137 479 222
45	47644	0.0	3	44790 2201 435 218
46	51273	0.0	3	48178 2360 488 247
47	45168	0.0	3	42539 2033 423 173
48	43802	0.0	3	41092 2109 397 204
49	46823	0.0	3	44198 2045 396 184
50	41908	0.0	3	39484 1864 375 185
51	42622	0.0	3	40225 1842 375 180
52	47511	0.0	3	44830 2109 391 181
53	46383	0.0	3	43809 1982 415 177
54	49932	0.0	3	47236 2079 443 174
55	56666	0.0	3	53684 2365 404 213
56	51543	0.0	3	48686 2204 451 202
57	50380	0.0	3	47690 2110 411 169
58	52762	0.0	3	49843 2294 421 204
59	47079	0.0	3	44556 1949 362 212
60	45464	0.0	3	43079 1861 355 169
61	48693	0.0	3	46070 2016 406 201
62	44997	0.0	3	42519 1871 416 191
63	47718	0.0	3	45209 1909 405 195
64	56199	0.0	3	53228 2330 453 188
65	55731	0.0	3	52952 2186 395 198
66	56250	0.0	3	53438 2219 402 191
67	60461	0.0	3	57518 2318 433 192
68	53219	0.0	3	50688 2001 377 153
69	51498	0.0	3	49024 1968 348 158
70	54149	0.0	3	51388 2202 372 187
71	47639	0.0	3	45302 1865 314 158
72	48069	0.0	3	45601 1985 334 149
73	53627	0.0	3	50913 2125 423 166
74	53005	0.0	3	50495 1953 353 204
75	60307	0.0	3	57390 2317 397 203
76	80073	0.0	3	76632 2772 452 217
77	73262	0.0	3	70381 2264 416 201
78	72029	0.0	3	69193 2321 353 162
79	76003	0.0	3	72982 2432 414 175
80	67067	0.0	3	64429 2127 346 165
81	62754	0.0	3	60219 2097 292 146
82	66712	0.0	3	64165 2094 309 144
83	61233	0.0	3	58902 1900 326 105
84	64192	0.0	3	61650 2082 302 158
85	79135	0.0	3	76111 2501 363 160
86	79285	0.0	3	76208 2549 345 183
87	78180	0.0	3	75000 2696 328 156
88	79901	0.0	3	76946 2421 370 164
89	70098	0.0	3	67358 2229 361 150
90	67562	0.0	3	64977 2095 333 157
91	68135	0.0	3	65562 2096 362 115
92	57045	0.0	3	54878 1797 248 122
93	55170	0.0	3	53028 1813 223 106
94	60352	0.0	3	58225 1723 285 119
95	58466	0.0	3	56312 1820 240 94
96	65382	0.0	3	62949 2054 277 102
97	71448	0.0	3	68699 2325 306 118
98	59158	0.0	3	56848 1890 293 127
99	54580	0.0	3	52521 1714 240 105
100	55298	0.0	3	53447 1552 216 83
101	43957	0.0	3	42376 1316 178 87
102	37106	0.0	3	35754 1170 128 54
103	36705	0.0	3	35445 1037 164 59
104	31766	0.0	3	30716 868 124 58
105	30272	0.0	3	29215 866 137 54
106	34467	0.0	3	33280 1017 119 51
107	29234	0.0	3	28229 850 110 45
108	21508	0.0	3	20794 613 78 23
109	17920	0.0	3	17336 491 64 29
110	12517	0.0	3	12083 372 44 18
111	10103	0.0	3	9735 310 38 20
112	7361	0.0	3	7124 211 17 9
113	5133	0.0	3	4964 146 18 5
114	3990	0.0	3	3835 121 25 9
115	2258	0.0	3	2194 53 8 3
116	984	0.0	3	937 37 6 4
117	1290	0.0	3	1250 31 6 3
118	1441	0.0	3	1374 48 8 11
119	963	0.0	3	926 31 4 2
120	770	0.0	3	743 20 5 2
121	482	0.0	3	460 18 0 4
122	793	0.0	3	755 31 3 4
123	140	0.0	3	132 6 1 1
124	197	0.0	3	192 4 1
125	26	0.0	3	26
126	54	0.0	3	50 3 1
127	141	0.0	3	106 22 6 7
128	220	0.0	3	183 23 8 6
129	26	0.0	3	25 1
130	78	0.0	3	69 8 1
131	81	0.0	3	78 3
132	278	0.0	3	262 14 2
133	57	0.0	3	52 5
134	108	0.0	3	95 6 4 3
135	110	0.0	3	108 1 1
136	606	0.0	3	589 17
137	74	0.0	3	71 3
138	7	0.0	3	7
139	643	0.0	3	633 10
140	111	0.0	3	107 2 1 1
141	14	0.0	3	14
142	122	0.0	3	115 7
143	103	0.0	3	101 2
144	51	0.0	3	50 1
145	3943	0.0	3	3777 149 11 6
146	119	0.0	3	110 6 3
147	10	0.0	3	10
148	15	0.0	3	13 2
149	1461	0.0	3	1341 108 7 5
150	14	0.0	3	7 3 0 4

=== Adapter 2 ===

Sequence: TGGTCATGTGGAGACGCTGGG; Type: regular 3'; Length: 21; Trimmed: 2064 times.

No. of allowed errors:
0-9 bp: 0; 10-19 bp: 1; 20-21 bp: 2

Bases preceding removed adapters:
  A: 31.2%
  C: 14.1%
  G: 15.1%
  T: 39.6%
  none/other: 0.0%

Overview of removed sequences
length	count	expect	max.err	error counts
5	1334	7780.8	0	1334
6	436	1945.2	0	436
7	151	486.3	0	151
8	39	121.6	0	39
9	39	30.4	0	5 34
10	40	7.6	1	8 32
11	18	1.9	1	0 18
12	2	0.5	1	0 2
13	1	0.1	1	0 1
127	1	0.0	2	0 0 1
133	1	0.0	2	0 0 1
134	2	0.0	2	0 0 2

=== Adapter 3 ===

Sequence: ATCACGGACTGCCCATAGAGAGGCTCTGG; Type: regular 3'; Length: 29; Trimmed: 73529 times.

No. of allowed errors:
0-9 bp: 0; 10-19 bp: 1; 20-29 bp: 2

Bases preceding removed adapters:
  A: 31.7%
  C: 21.2%
  G: 29.2%
  T: 17.8%
  none/other: 0.0%

Overview of removed sequences
length	count	expect	max.err	error counts
5	1854	7780.8	0	1854
6	9117	1945.2	0	9117
7	3367	486.3	0	3367
8	788	121.6	0	788
9	1021	30.4	0	1018 3
10	3941	7.6	1	3365 576
11	1525	1.9	1	1440 85
12	426	0.5	1	399 27
13	552	0.1	1	503 49
14	210	0.0	1	200 10
15	393	0.0	1	375 18
16	158	0.0	1	148 10
17	121	0.0	1	117 4
18	371	0.0	1	359 9 3
19	2314	0.0	1	2235 78 1
20	512	0.0	2	487 17 8
21	291	0.0	2	271 18 2
22	151	0.0	2	144 6 1
23	431	0.0	2	409 18 4
24	322	0.0	2	300 20 2
25	76	0.0	2	72 2 2
26	82	0.0	2	72 9 1
27	711	0.0	2	659 43 9
28	813	0.0	2	755 46 12
29	243	0.0	2	225 18
30	160	0.0	2	149 10 1
31	79	0.0	2	71 7 1
32	53	0.0	2	51 2
33	63	0.0	2	58 4 1
34	21	0.0	2	17 3 1
35	22	0.0	2	20 2
36	34	0.0	2	31 1 2
37	25	0.0	2	24 0 1
38	8	0.0	2	8
39	15	0.0	2	14 1
40	58	0.0	2	53 5
41	68	0.0	2	66 2
42	13	0.0	2	11 1 1
43	10	0.0	2	10
44	2	0.0	2	2
45	4	0.0	2	4
46	15	0.0	2	13 0 2
47	7	0.0	2	5 1 1
48	2	0.0	2	1 1
49	6	0.0	2	6
51	3	0.0	2	2 1
52	3	0.0	2	3
53	1	0.0	2	1
54	3	0.0	2	2 1
55	4	0.0	2	2 2
56	2	0.0	2	1 1
58	3	0.0	2	3
59	3	0.0	2	3
60	3	0.0	2	3
61	4	0.0	2	4
62	10	0.0	2	9 1
63	1	0.0	2	1
64	2	0.0	2	2
65	3	0.0	2	3
66	1	0.0	2	1
67	1	0.0	2	0 1
69	3	0.0	2	3
71	1	0.0	2	1
72	1	0.0	2	0 1
73	1	0.0	2	1
75	2	0.0	2	2
81	1	0.0	2	1
82	4	0.0	2	4
84	1	0.0	2	1
87	9	0.0	2	8 1
88	2	0.0	2	2
89	1	0.0	2	1
90	32	0.0	2	28 4
92	18	0.0	2	14 4
93	755	0.0	2	708 40 7
94	26185	0.0	2	24993 1018 174
95	1021	0.0	2	967 44 10
96	11617	0.0	2	11019 522 76
97	54	0.0	2	44 9 1
98	2729	0.0	2	2575 125 29
99	14	0.0	2	11 0 3
100	39	0.0	2	37 1 1
101	2	0.0	2	2
102	32	0.0	2	30 2
103	1	0.0	2	1
104	7	0.0	2	7
105	66	0.0	2	60 6
106	77	0.0	2	71 3 3
107	129	0.0	2	119 10
108	3	0.0	2	3
109	9	0.0	2	8 1
110	1	0.0	2	1
111	71	0.0	2	68 3
112	2	0.0	2	2
115	29	0.0	2	29
117	1	0.0	2	0 0 1
120	6	0.0	2	6
122	1	0.0	2	1
123	2	0.0	2	2
125	15	0.0	2	11 2 2
128	15	0.0	2	15
129	1	0.0	2	1
130	4	0.0	2	4
131	1	0.0	2	0 0 1
132	4	0.0	2	1 1 2
133	2	0.0	2	2
135	4	0.0	2	4
136	12	0.0	2	10 0 2
137	2	0.0	2	2
139	4	0.0	2	4
140	3	0.0	2	3
141	8	0.0	2	6 2
142	10	0.0	2	10
144	2	0.0	2	2
145	1	0.0	2	1
147	4	0.0	2	3 1
150	6	0.0	2	5 0 1

This is cutadapt 1.18 with Python 3.5.6
Command line parameters: -a TGGGCCGGTGCAGTTAATGTAGGGAAAGAGTGT -j 10 -O 5 -o /bios-store5/lyt/test_sample/sample3//R2.cutadapt.fastq /bios-store5/lyt/test_sample/sample3//correct_R2.fastq
Processing reads on 10 cores in single-end mode ...
Finished in 21.98 s (3 us/read; 21.75 M reads/minute).

=== Summary ===

Total reads processed:               7,967,522
Reads with adapters:                 4,748,942 (59.6%)
Reads written (passing filters):     7,967,522 (100.0%)

Total basepairs processed: 1,195,128,300 bp
Total written (filtered):    901,733,785 bp (75.5%)

=== Adapter 1 ===

Sequence: TGGGCCGGTGCAGTTAATGTAGGGAAAGAGTGT; Type: regular 3'; Length: 33; Trimmed: 4748942 times.

No. of allowed errors:
0-9 bp: 0; 10-19 bp: 1; 20-29 bp: 2; 30-33 bp: 3

Bases preceding removed adapters:
  A: 25.7%
  C: 17.3%
  G: 22.2%
  T: 34.7%
  none/other: 0.0%

Overview of removed sequences
length	count	expect	max.err	error counts
5	28867	7780.8	0	28867
6	26944	1945.2	0	26944
7	28695	486.3	0	28695
8	26163	121.6	0	26163
9	27560	30.4	0	27439 121
10	32079	7.6	1	30704 1375
11	30789	1.9	1	29458 1331
12	33249	0.5	1	31795 1454
13	36508	0.1	1	34981 1527
14	33233	0.0	1	31786 1447
15	32829	0.0	1	31407 1422
16	34129	0.0	1	32405 1724
17	30068	0.0	1	28472 1596
18	30323	0.0	1	28524 1784 15
19	33030	0.0	1	31012 1941 77
20	31464	0.0	2	29221 1677 566
21	33874	0.0	2	31235 2024 615
22	38449	0.0	2	35323 2415 711
23	36906	0.0	2	33807 2425 674
24	37754	0.0	2	34502 2597 655
25	39890	0.0	2	36383 2768 739
26	35453	0.0	2	31785 3024 644
27	34520	0.0	2	30918 2900 700 2
28	37047	0.0	2	33017 3227 736 67
29	33267	0.0	2	29802 2790 657 18
30	34224	0.0	3	30379 2833 623 389
31	38757	0.0	3	34582 3028 702 445
32	37840	0.0	3	33696 3035 661 448
33	40805	0.0	3	36097 3506 748 454
34	45221	0.0	3	39977 3879 869 496
35	41191	0.0	3	36591 3384 740 476
36	40701	0.0	3	36288 3254 705 454
37	41975	0.0	3	37724 3090 728 433
38	37787	0.0	3	33830 2840 682 435
39	37205	0.0	3	33351 2748 680 426
40	39830	0.0	3	35769 2904 698 459
41	37512	0.0	3	33724 2818 581 389
42	40118	0.0	3	35931 3044 699 444
43	46008	0.0	3	41355 3392 750 511
44	44933	0.0	3	40566 3196 722 449
45	45507	0.0	3	41105 3100 797 505
46	48917	0.0	3	44334 3288 770 525
47	42938	0.0	3	39026 2808 660 444
48	41795	0.0	3	37823 2887 640 445
49	44302	0.0	3	39960 3202 689 451
50	39820	0.0	3	36095 2654 617 454
51	40387	0.0	3	36488 2871 631 397
52	45068	0.0	3	40869 3032 709 458
53	43956	0.0	3	39875 2908 691 482
54	47182	0.0	3	43005 2975 731 471
55	53484	0.0	3	48789 3328 802 565
56	48728	0.0	3	44444 3059 751 474
57	47606	0.0	3	43204 3179 704 519
58	49830	0.0	3	45366 3185 746 533
59	44244	0.0	3	40039 3131 638 436
60	42803	0.0	3	39171 2591 617 424
61	45952	0.0	3	42174 2650 668 460
62	42417	0.0	3	38906 2503 598 410
63	44843	0.0	3	41083 2640 655 465
64	52789	0.0	3	48215 3227 787 560
65	52329	0.0	3	47668 3380 758 523
66	52914	0.0	3	48314 3262 775 563
67	56683	0.0	3	52038 3265 771 609
68	49720	0.0	3	45693 2849 698 480
69	48007	0.0	3	44272 2654 633 448
70	50420	0.0	3	46480 2764 683 493
71	44216	0.0	3	40679 2531 568 438
72	44531	0.0	3	40974 2530 605 422
73	49587	0.0	3	45516 3039 588 444
74	48912	0.0	3	45075 2752 650 435
75	55643	0.0	3	51368 3160 682 433
76	74510	0.0	3	69696 3534 772 508
77	68278	0.0	3	63919 3257 661 441
78	67234	0.0	3	63178 3028 592 436
79	71034	0.0	3	66598 3317 656 463
80	62436	0.0	3	58668 2765 596 407
81	58475	0.0	3	54954 2575 545 401
82	62096	0.0	3	58326 2789 586 395
83	56893	0.0	3	53522 2575 467 329
84	59641	0.0	3	56197 2530 577 337
85	73501	0.0	3	68929 3419 672 481
86	73397	0.0	3	68938 3294 708 457
87	72523	0.0	3	68246 3146 634 497
88	74225	0.0	3	69827 3203 679 516
89	64956	0.0	3	61092 2772 648 444
90	62527	0.0	3	58839 2616 619 453
91	62844	0.0	3	59036 2774 609 425
92	52706	0.0	3	49404 2387 529 386
93	50809	0.0	3	47772 2154 511 372
94	55553	0.0	3	52083 2535 539 396
95	53694	0.0	3	50481 2263 545 405
96	60015	0.0	3	56355 2578 650 432
97	65376	0.0	3	61458 2827 636 455
98	53990	0.0	3	50792 2258 543 397
99	49891	0.0	3	46961 2094 483 353
100	50377	0.0	3	47225 2200 537 415
101	39745	0.0	3	37446 1546 409 344
102	33211	0.0	3	31394 1260 273 284
103	32896	0.0	3	31196 1303 201 196
104	28236	0.0	3	26773 1120 201 142
105	26857	0.0	3	25508 1110 152 87
106	30412	0.0	3	29059 1094 161 98
107	25726	0.0	3	24530 997 133 66
108	19027	0.0	3	18167 716 91 53
109	15782	0.0	3	15007 605 102 68
110	10871	0.0	3	10313 450 65 43
111	8722	0.0	3	8278 344 64 36
112	6359	0.0	3	6092 214 29 24
113	4475	0.0	3	4258 185 21 11
114	3446	0.0	3	3240 158 32 16
115	1903	0.0	3	1798 83 11 11
116	757	0.0	3	718 21 10 8
117	786	0.0	3	749 27 5 5
118	1084	0.0	3	1014 52 10 8
119	784	0.0	3	722 42 12 8
120	542	0.0	3	505 28 3 6
121	296	0.0	3	266 14 9 7
122	472	0.0	3	428 29 7 8
123	107	0.0	3	97 7 1 2
124	150	0.0	3	137 5 5 3
125	20	0.0	3	18 1 1
126	50	0.0	3	48 2
127	131	0.0	3	126 5
128	208	0.0	3	197 5 5 1
129	22	0.0	3	22
130	59	0.0	3	53 3 3
131	60	0.0	3	55 3 2
132	225	0.0	3	216 9
133	41	0.0	3	41
134	88	0.0	3	85 2 1
135	85	0.0	3	77 7 1
136	509	0.0	3	479 17 8 5
137	61	0.0	3	53 3 1 4
138	8	0.0	3	8
139	512	0.0	3	474 20 8 10
140	82	0.0	3	76 2 1 3
141	11	0.0	3	10 1
142	96	0.0	3	91 4 1
143	74	0.0	3	71 3
144	41	0.0	3	39 1 1
145	3041	0.0	3	2918 63 41 19
146	78	0.0	3	74 1 2 1
147	10	0.0	3	9 0 0 1
148	10	0.0	3	10
149	1062	0.0	3	1015 37 7 3
150	4	0.0	3	3 1

Read1 before filtering:
total reads: 7967522
total bases: 874483859
Q20 bases: 859217232(98.2542%)
Q30 bases: 831386671(95.0717%)

Read2 before filtering:
total reads: 7967522
total bases: 901733785
Q20 bases: 852948905(94.5899%)
Q30 bases: 800554845(88.7795%)

Read1 after filtering:
total reads: 7878908
total bases: 866129341
Q20 bases: 851557304(98.3176%)
Q30 bases: 824410282(95.1833%)

Read2 after filtering:
total reads: 7878908
total bases: 885627139
Q20 bases: 838450992(94.6731%)
Q30 bases: 786893183(88.8515%)

Filtering result:
reads passed filter: 15757816
reads failed due to low quality: 0
reads failed due to too many N: 0
reads failed due to too short: 177228
reads with adapter trimmed: 316238
bases trimmed due to adapters: 2324677

Duplication rate: 16.6815%

Insert size peak (evaluated by paired-end reads): 0

JSON report: fastp.json
HTML report: fastp.html

/bios-store1/home/yutongli/fastp -Q 30 -i /bios-store5/lyt/test_sample/sample3//R1.cutadapt.fastq -o /bios-store5/lyt/test_sample/sample3//fastp_r1.fastq -I /bios-store5/lyt/test_sample/sample3//R2.cutadapt.fastq -O /bios-store5/lyt/test_sample/sample3//fastp_r2.fastq 
fastp v0.23.4, time used: 32 seconds
Skipping '/bios-store5/lyt/test_sample/sample3//output_re_I1_T500.fastq.gz' which didn't exist, or couldn't be read
Skipping '/bios-store5/lyt/test_sample/sample3//output_re_R1_T500.fastq.gz' which didn't exist, or couldn't be read
Skipping '/bios-store5/lyt/test_sample/sample3//output_re_R2_T500.fastq.gz' which didn't exist, or couldn't be read
text/plain
Started analysis of fastp_i1.fastq
Approx 5% complete for fastp_i1.fastq
Approx 10% complete for fastp_i1.fastq
Approx 15% complete for fastp_i1.fastq
Approx 20% complete for fastp_i1.fastq
Approx 25% complete for fastp_i1.fastq
Approx 30% complete for fastp_i1.fastq
Approx 35% complete for fastp_i1.fastq
Approx 40% complete for fastp_i1.fastq
Approx 45% complete for fastp_i1.fastq
Approx 50% complete for fastp_i1.fastq
Approx 55% complete for fastp_i1.fastq
Approx 60% complete for fastp_i1.fastq
Approx 65% complete for fastp_i1.fastq
Approx 70% complete for fastp_i1.fastq
Approx 75% complete for fastp_i1.fastq
Approx 80% complete for fastp_i1.fastq
Approx 85% complete for fastp_i1.fastq
Approx 90% complete for fastp_i1.fastq
Approx 95% complete for fastp_i1.fastq
Analysis complete for fastp_i1.fastq
text/plain
Started analysis of fastp_r1.fastq
Approx 5% complete for fastp_r1.fastq
Approx 10% complete for fastp_r1.fastq
Approx 15% complete for fastp_r1.fastq
Approx 20% complete for fastp_r1.fastq
Approx 25% complete for fastp_r1.fastq
Approx 30% complete for fastp_r1.fastq
Approx 35% complete for fastp_r1.fastq
Approx 40% complete for fastp_r1.fastq
Approx 45% complete for fastp_r1.fastq
Approx 50% complete for fastp_r1.fastq
Approx 55% complete for fastp_r1.fastq
Approx 60% complete for fastp_r1.fastq
Approx 65% complete for fastp_r1.fastq
Approx 70% complete for fastp_r1.fastq
Approx 75% complete for fastp_r1.fastq
Approx 80% complete for fastp_r1.fastq
Approx 85% complete for fastp_r1.fastq
Approx 90% complete for fastp_r1.fastq
Approx 95% complete for fastp_r1.fastq
Analysis complete for fastp_r1.fastq
text/plain
Started analysis of fastp_r2.fastq
Approx 5% complete for fastp_r2.fastq
Approx 10% complete for fastp_r2.fastq
Approx 15% complete for fastp_r2.fastq
Approx 20% complete for fastp_r2.fastq
Approx 25% complete for fastp_r2.fastq
Approx 30% complete for fastp_r2.fastq
Approx 35% complete for fastp_r2.fastq
Approx 40% complete for fastp_r2.fastq
Approx 45% complete for fastp_r2.fastq
Approx 50% complete for fastp_r2.fastq
Approx 55% complete for fastp_r2.fastq
Approx 60% complete for fastp_r2.fastq
Approx 65% complete for fastp_r2.fastq
Approx 70% complete for fastp_r2.fastq
Approx 75% complete for fastp_r2.fastq
Approx 80% complete for fastp_r2.fastq
Approx 85% complete for fastp_r2.fastq
Approx 90% complete for fastp_r2.fastq
Approx 95% complete for fastp_r2.fastq
Analysis complete for fastp_r2.fastq


== Warning ==  output dir is not empty! Please, clean output directory before run.




== Warning ==  No assembly mode was specified! If you intend to assemble high-coverage multi-cell/isolate data, use '--isolate' option.


Command line: ./SPAdes-3.15.5-Linux/bin/spades.py	-1	/bios-store5/lyt/test_sample/sample3/fastp_r1.fastq	-2	/bios-store5/lyt/test_sample/sample3/fastp_r2.fastq	-o	/bios-store5/lyt/test_sample/sample3/spades_result_unique_new	

System information:
  SPAdes version: 3.15.5
  Python version: 3.5.6
  OS: Linux-3.10.0-1160.el7.x86_64-x86_64-with-redhat-7.9-Maipo

Output dir: /bios-store5/lyt/test_sample/sample3/spades_result_unique_new
Mode: read error correction and assembling
Debug mode is turned OFF

Dataset parameters:
  Standard mode
  For multi-cell/isolate data we recommend to use '--isolate' option; for single-cell MDA data use '--sc'; for metagenomic data use '--meta'; for RNA-Seq use '--rna'.
  Reads:
    Library number: 1, library type: paired-end
      orientation: fr
      left reads: ['/bios-store5/lyt/test_sample/sample3/fastp_r1.fastq']
      right reads: ['/bios-store5/lyt/test_sample/sample3/fastp_r2.fastq']
      interlaced reads: not specified
      single reads: not specified
      merged reads: not specified
Read error correction parameters:
  Iterations: 1
  PHRED offset will be auto-detected
  Corrected reads will be compressed
Assembly parameters:
  k: automatic selection based on read length
  Repeat resolution is enabled
  Mismatch careful mode is turned OFF
  MismatchCorrector will be SKIPPED
  Coverage cutoff is turned OFF
Other parameters:
  Dir for temp files: /bios-store5/lyt/test_sample/sample3/spades_result_unique_new/tmp
  Threads: 16
  Memory limit (in Gb): 125


======= SPAdes pipeline started. Log can be found here: /bios-store5/lyt/test_sample/sample3/spades_result_unique_new/spades.log

/bios-store5/lyt/test_sample/sample3/fastp_r1.fastq: max reads length: 150
/bios-store5/lyt/test_sample/sample3/fastp_r2.fastq: max reads length: 150

Reads length: 150

Default k-mer sizes were set to [21, 33, 55, 77] because estimated read length (150) is equal to or greater than 150

===== Before start started. 


===== Read error correction started. 


===== Read error correction started. 


== Running: /bios-store5/lyt/python_demo_try/SeriesAnalysis/SPAdes-3.15.5-Linux/bin/spades-hammer /bios-store5/lyt/test_sample/sample3/spades_result_unique_new/corrected/configs/config.info

  0:00:00.000     1M / 11M   INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from refs/heads/spades_3.15.5, git revision e757b8216f9a038fb616e9551a2d4891b2d19ad7
  0:00:00.035     1M / 11M   INFO    General                 (main.cpp                  :  76)   Loading config from /bios-store5/lyt/test_sample/sample3/spades_result_unique_new/corrected/configs/config.info
  0:00:00.063     1M / 11M   INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 16
  0:00:00.086     1M / 11M   INFO    General                 (memory_limit.cpp          :  54)   Memory limit set to 125 Gb
  0:00:00.100     1M / 11M   INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset
  0:00:00.117     1M / 11M   INFO    General                 (main.cpp                  :  92)   Determined value is 33
  0:00:00.132     1M / 11M   INFO    General                 (hammer_tools.cpp          :  38)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]
  0:00:00.139     1M / 11M   INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes
     === ITERATION 0 begins ===
  0:00:00.202     1M / 11M   INFO    General                 (kmer_index_builder.hpp    : 243)   Splitting kmer instances into 16 files using 16 threads. This might take a while.
  0:00:00.214     1M / 11M   INFO    General                 (file_limit.hpp            :  42)   Open file limit set to 1024
  0:00:00.236     1M / 11M   INFO    General                 (kmer_splitter.hpp         :  93)   Memory available for splitting buffers: 2.60416 Gb
  0:00:00.239     1M / 11M   INFO    General                 (kmer_splitter.hpp         : 101)   Using cell size of 4194304
  0:00:00.240  9217M / 9217M INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /bios-store5/lyt/test_sample/sample3/fastp_r1.fastq
  0:00:30.178  9217M / 14G   INFO   K-mer Splitting          (kmer_data.cpp             : 107)   Processed 5089730 reads
  0:00:46.475  9217M / 14G   INFO   K-mer Splitting          (kmer_data.cpp             : 107)   Processed 7878908 reads
  0:00:46.497  9217M / 14G   INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /bios-store5/lyt/test_sample/sample3/fastp_r2.fastq
  0:01:15.955  9217M / 15G   INFO   K-mer Splitting          (kmer_data.cpp             : 107)   Processed 12960656 reads
  0:01:31.746  9217M / 15G   INFO   K-mer Splitting          (kmer_data.cpp             : 107)   Processed 15757816 reads
  0:01:31.763  9217M / 15G   INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 15757816 reads processed
  0:01:31.784     1M / 15G   INFO    General                 (kmer_index_builder.hpp    : 249)   Starting k-mer counting.
  0:01:37.722     1M / 15G   INFO    General                 (kmer_index_builder.hpp    : 260)   K-mer counting done. There are 165254872 kmers in total.
  0:01:37.741     1M / 15G   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 395)   Building perfect hash indices
  0:01:46.895   119M / 15G   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 431)   Index built. Total 165254872 kmers, 119369192 bytes occupied (5.77867 bits per kmer).
  0:01:46.901   119M / 15G   INFO   K-mer Counting           (kmer_data.cpp             : 354)   Arranging kmers in hash map order
  0:01:56.036  2647M / 15G   INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.
  0:04:56.187  2647M / 15G   INFO    General                 (main.cpp                  : 155)   Extracting clusters:
  0:04:56.188  2647M / 15G   INFO    General                 (concurrent_dsu.cpp        :  18)   Connecting to root
  0:04:56.955  2647M / 15G   INFO    General                 (concurrent_dsu.cpp        :  34)   Calculating counts
  0:05:49.155  4824M / 15G   INFO    General                 (concurrent_dsu.cpp        :  63)   Writing down entries
  0:07:34.329  2647M / 15G   INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 63401763
  0:07:34.549  1383M / 15G   INFO   K-mer Counting           (kmer_data.cpp             : 371)   Collecting K-mer information, this takes a while.
  0:07:36.864  5167M / 15G   INFO   K-mer Counting           (kmer_data.cpp             : 377)   Processing /bios-store5/lyt/test_sample/sample3/fastp_r1.fastq
  0:09:30.772  5167M / 15G   INFO   K-mer Counting           (kmer_data.cpp             : 377)   Processing /bios-store5/lyt/test_sample/sample3/fastp_r2.fastq
  0:11:33.097  5167M / 15G   INFO   K-mer Counting           (kmer_data.cpp             : 384)   Collection done, postprocessing.
  0:11:34.199  5167M / 15G   INFO   K-mer Counting           (kmer_data.cpp             : 397)   There are 165254872 kmers in total. Among them 129478278 (78.3507%) are singletons.
  0:11:34.206  5167M / 15G   INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph
  1:16:35.179  5168M / 15G   INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering done. Total 16355 non-read kmers were generated.
  1:16:35.179  5168M / 15G   INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)   Subclustering statistics:
  1:16:35.179  5168M / 15G   INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton hamming clusters: 51500730. Among them 2386672 (4.63425%) are good
  1:16:35.179  5168M / 15G   INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total singleton subclusters: 23379. Among them 11813 (50.5283%) are good
  1:16:35.179  5168M / 15G   INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Total non-singleton subcluster centers: 14013297. Among them 8350195 (59.5877%) are good
  1:16:35.179  5168M / 15G   INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average size of non-trivial subcluster: 8.12069 kmers
  1:16:35.179  5168M / 15G   INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Average number of sub-clusters per non-singleton cluster: 1.17945
  1:16:35.179  5168M / 15G   INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Total solid k-mers: 10748680
  1:16:35.179  5168M / 15G   INFO   Hamming Subclustering    (kmer_cluster.cpp          : 658)     Substitution probabilities: [4,4]((0.910433,0.0286313,0.0130674,0.0478687),(0.11189,0.833539,0.0243086,0.0302633),(0.0268227,0.0219697,0.834555,0.116652),(0.0428125,0.0118473,0.0273063,0.918034))
  1:16:35.408  5168M / 15G   INFO    General                 (main.cpp                  : 178)   Finished clustering.
  1:16:35.408  5168M / 15G   INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 16 threads.
  1:17:27.797  5168M / 15G   INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 1289928 new k-mers.
  1:18:20.081  5168M / 15G   INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 1 produced 22512 new k-mers.
  1:19:12.040  5168M / 15G   INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 2 produced 1244 new k-mers.
  1:20:04.157  5168M / 15G   INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 3 produced 54 new k-mers.
  1:20:55.945  5168M / 15G   INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 4 produced 19 new k-mers.
  1:21:47.915  5168M / 15G   INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 5 produced 0 new k-mers.
  1:21:47.915  5168M / 15G   INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized
  1:21:47.915  5168M / 15G   INFO    General                 (hammer_tools.cpp          : 222)   Starting read correction in 16 threads.
  1:21:47.916  5168M / 15G   INFO    General                 (hammer_tools.cpp          : 235)   Correcting pair of reads: /bios-store5/lyt/test_sample/sample3/fastp_r1.fastq and /bios-store5/lyt/test_sample/sample3/fastp_r2.fastq
  1:21:52.426  6430M / 15G   INFO    General                 (hammer_tools.cpp          : 170)   Prepared batch 0 of 1600000 reads.
  1:22:11.071  6549M / 15G   INFO    General                 (hammer_tools.cpp          : 177)   Processed batch 0
  1:22:14.105  6549M / 15G   INFO    General                 (hammer_tools.cpp          : 187)   Written batch 0
  1:22:18.243  6811M / 15G   INFO    General                 (hammer_tools.cpp          : 170)   Prepared batch 1 of 1600000 reads.
  1:22:36.586  6811M / 15G   INFO    General                 (hammer_tools.cpp          : 177)   Processed batch 1
  1:22:39.908  6811M / 15G   INFO    General                 (hammer_tools.cpp          : 187)   Written batch 1
  1:22:43.952  6941M / 15G   INFO    General                 (hammer_tools.cpp          : 170)   Prepared batch 2 of 1600000 reads.
  1:23:02.492  6941M / 15G   INFO    General                 (hammer_tools.cpp          : 177)   Processed batch 2
  1:23:05.972  6941M / 15G   INFO    General                 (hammer_tools.cpp          : 187)   Written batch 2
  1:23:10.031  7007M / 15G   INFO    General                 (hammer_tools.cpp          : 170)   Prepared batch 3 of 1600000 reads.
  1:23:28.566  7007M / 15G   INFO    General                 (hammer_tools.cpp          : 177)   Processed batch 3
  1:23:32.034  7007M / 15G   INFO    General                 (hammer_tools.cpp          : 187)   Written batch 3
  1:23:35.632  7038M / 15G   INFO    General                 (hammer_tools.cpp          : 170)   Prepared batch 4 of 1478908 reads.
  1:23:52.793  7038M / 15G   INFO    General                 (hammer_tools.cpp          : 177)   Processed batch 4
  1:23:56.022  7038M / 15G   INFO    General                 (hammer_tools.cpp          : 187)   Written batch 4
  1:23:58.662  5168M / 15G   INFO    General                 (hammer_tools.cpp          : 276)   Correction done. Changed 4045737 bases in 1592995 reads.
  1:23:58.811  5168M / 15G   INFO    General                 (hammer_tools.cpp          : 277)   Failed to correct 17032 bases out of 1751725766.
  1:23:59.794     1M / 15G   INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /bios-store5/lyt/test_sample/sample3/spades_result_unique_new/corrected/corrected.yaml
  1:23:59.800     1M / 15G   INFO    General                 (main.cpp                  : 262)   All done. Exiting.

===== Read error correction finished. 


===== corrected reads compression started. 


== Running: /bios-store1/home/yutongli/.conda/envs/try_619_new/bin/python /bios-store5/lyt/python_demo_try/SeriesAnalysis/SPAdes-3.15.5-Linux/share/spades/spades_pipeline/scripts/compress_all.py --input_file /bios-store5/lyt/test_sample/sample3/spades_result_unique_new/corrected/corrected.yaml --ext_python_modules_home /bios-store5/lyt/python_demo_try/SeriesAnalysis/SPAdes-3.15.5-Linux/share/spades --max_threads 16 --output_dir /bios-store5/lyt/test_sample/sample3/spades_result_unique_new/corrected --gzip_output

== Compressing corrected reads (with pigz)
== Files to compress: ['/bios-store5/lyt/test_sample/sample3/spades_result_unique_new/corrected/fastp_r1.00.0_0.cor.fastq', '/bios-store5/lyt/test_sample/sample3/spades_result_unique_new/corrected/fastp_r_unpaired.00.0_0.cor.fastq', '/bios-store5/lyt/test_sample/sample3/spades_result_unique_new/corrected/fastp_r2.00.0_0.cor.fastq']
== Files compression is finished
== Dataset yaml file is updated

===== corrected reads compression finished. 


===== Read error correction finished. 


===== Assembling started. 


===== K21 started. 


== Running: /bios-store5/lyt/python_demo_try/SeriesAnalysis/SPAdes-3.15.5-Linux/bin/spades-core /bios-store5/lyt/test_sample/sample3/spades_result_unique_new/K21/configs/config.info

  0:00:00.000     1M / 11M   INFO    General                 (main.cpp                  :  99)   Loaded config from /bios-store5/lyt/test_sample/sample3/spades_result_unique_new/K21/configs/config.info
  0:00:00.001     1M / 11M   INFO    General                 (memory_limit.cpp          :  54)   Memory limit set to 125 Gb
  0:00:00.001     1M / 11M   INFO    General                 (main.cpp                  : 107)   Starting SPAdes, built from refs/heads/spades_3.15.5, git revision e757b8216f9a038fb616e9551a2d4891b2d19ad7
  0:00:00.001     1M / 11M   INFO    General                 (main.cpp                  : 108)   Maximum k-mer length: 128
  0:00:00.001     1M / 11M   INFO    General                 (main.cpp                  : 109)   Assembling dataset (/bios-store5/lyt/test_sample/sample3/spades_result_unique_new/dataset.info) with K=21
  0:00:00.001     1M / 11M   INFO    General                 (main.cpp                  : 110)   Maximum # of threads to use (adjusted due to OMP capabilities): 16
  0:00:00.001     1M / 11M   INFO    General                 (pipeline.cpp              : 212)   SPAdes started
  0:00:00.001     1M / 11M   INFO    General                 (pipeline.cpp              : 225)   Starting from stage: read_conversion
  0:00:00.001     1M / 11M   INFO    General                 (pipeline.cpp              : 231)   Two-step repeat resolution disabled
  0:00:00.001     1M / 11M   INFO   GraphCore                (graph_core.hpp            : 672)   Graph created, vertex min_id: 3, edge min_id: 3
  0:00:00.001     1M / 11M   INFO   GraphCore                (graph_core.hpp            : 673)   Vertex size: 48, edge size: 40
  0:00:00.001     1M / 11M   INFO    General                 (edge_index.hpp            : 113)   Size of edge index entries: 12/8
  0:00:00.001     1M / 11M   INFO   StageManager             (stage.cpp                 : 185)   STAGE == Binary Read Conversion (id: read_conversion)
  0:00:00.004     1M / 11M   INFO    General                 (read_converter.cpp        :  72)   Converting reads to binary format for library #0 (takes a while)
  0:00:00.004     1M / 11M   INFO    General                 (read_converter.cpp        :  73)   Converting paired reads
  0:00:00.644    21M / 56M   INFO    General                 (binary_converter.cpp      :  96)   16384 reads processed
  0:00:00.661    21M / 58M   INFO    General                 (binary_converter.cpp      :  96)   32768 reads processed
  0:00:00.682    21M / 62M   INFO    General                 (binary_converter.cpp      :  96)   65536 reads processed
  0:00:00.928    14M / 93M   INFO    General                 (binary_converter.cpp      :  96)   131072 reads processed
  0:00:01.267     6M / 128M  INFO    General                 (binary_converter.cpp      :  96)   262144 reads processed
  0:00:01.872     0M / 159M  INFO    General                 (binary_converter.cpp      :  96)   524288 reads processed
  0:00:03.175     0M / 236M  INFO    General                 (binary_converter.cpp      :  96)   1048576 reads processed
  0:00:05.867     0M / 308M  INFO    General                 (binary_converter.cpp      :  96)   2097152 reads processed
  0:00:10.997     0M / 322M  INFO    General                 (binary_converter.cpp      :  96)   4194304 reads processed
  0:00:20.701     0M / 331M  INFO    General                 (binary_converter.cpp      : 111)   7775783 reads written
  0:00:20.701     0M / 331M  INFO    General                 (read_converter.cpp        :  86)   Converting single reads
  0:00:20.919     0M / 331M  INFO    General                 (binary_converter.cpp      :  96)   16384 reads processed
  0:00:20.927     0M / 331M  INFO    General                 (binary_converter.cpp      :  96)   32768 reads processed
  0:00:20.940     0M / 331M  INFO    General                 (binary_converter.cpp      :  96)   65536 reads processed
  0:00:21.052     0M / 331M  INFO    General                 (binary_converter.cpp      : 111)   101285 reads written
  0:00:21.052     0M / 331M  INFO    General                 (read_converter.cpp        :  92)   Converting merged reads
  0:00:21.054     0M / 331M  INFO    General                 (binary_converter.cpp      : 111)   0 reads written
  0:00:21.937     1M / 331M  INFO   StageManager             (stage.cpp                 : 185)   STAGE == de Bruijn graph construction (id: construction)
  0:00:22.127     1M / 331M  INFO    General                 (construction.cpp          : 153)   Max read length 150
  0:00:22.128     1M / 331M  INFO    General                 (construction.cpp          : 159)   Average read length 111.138
  0:00:22.128     1M / 331M  INFO    General                 (stage.cpp                 : 117)   PROCEDURE == k+1-mer counting (id: construction:kpomer_counting)
  0:00:22.128     1M / 331M  INFO    General                 (kmer_index_builder.hpp    : 243)   Splitting kmer instances into 160 files using 16 threads. This might take a while.
  0:00:22.130     1M / 331M  INFO    General                 (file_limit.hpp            :  42)   Open file limit set to 1024
  0:00:22.130     1M / 331M  INFO    General                 (kmer_splitter.hpp         :  93)   Memory available for splitting buffers: 2.60415 Gb
  0:00:22.130     1M / 331M  INFO    General                 (kmer_splitter.hpp         : 101)   Using cell size of 419430
  0:00:35.307  9601M / 9601M INFO    General                 (kmer_splitters.hpp        : 125)   Processed 23209103 reads
  0:00:39.656  9601M / 9601M INFO    General                 (kmer_splitters.hpp        : 125)   Processed 31305702 reads
  0:00:39.663     1M / 9068M INFO    General                 (kmer_splitters.hpp        : 131)   Used 31305702 reads
  0:00:40.869     1M / 9068M INFO    General                 (kmer_index_builder.hpp    : 249)   Starting k-mer counting.
  0:00:42.338     1M / 9068M INFO    General                 (kmer_index_builder.hpp    : 260)   K-mer counting done. There are 43097838 kmers in total.
  0:00:42.338     1M / 9068M INFO    General                 (stage.cpp                 : 117)   PROCEDURE == Extension index construction (id: construction:extension_index_construction)
  0:00:42.455     1M / 9068M INFO   K-mer Index Building     (kmer_index_builder.hpp    : 438)   Building kmer index
  0:00:42.455     1M / 9068M INFO    General                 (kmer_index_builder.hpp    : 243)   Splitting kmer instances into 160 files using 16 threads. This might take a while.
  0:00:42.456     1M / 9068M INFO    General                 (file_limit.hpp            :  42)   Open file limit set to 1024
  0:00:42.456     1M / 9068M INFO    General                 (kmer_splitter.hpp         :  93)   Memory available for splitting buffers: 2.60415 Gb
  0:00:42.456     1M / 9068M INFO    General                 (kmer_splitter.hpp         : 101)   Using cell size of 419430
  0:00:44.801  9601M / 9601M INFO    General                 (kmer_splitters.hpp        : 194)   Processed 43097838 kmers
  0:00:44.804  9601M / 9601M INFO    General                 (kmer_splitters.hpp        : 199)   Used 43097838 kmers.
  0:00:44.808     1M / 9068M INFO    General                 (kmer_index_builder.hpp    : 249)   Starting k-mer counting.
  0:00:45.938     1M / 9068M INFO    General                 (kmer_index_builder.hpp    : 260)   K-mer counting done. There are 41469073 kmers in total.
  0:00:45.938     1M / 9068M INFO   K-mer Index Building     (kmer_index_builder.hpp    : 395)   Building perfect hash indices
  0:00:46.596    31M / 9068M INFO   K-mer Index Building     (kmer_index_builder.hpp    : 431)   Index built. Total 41469073 kmers, 30070584 bytes occupied (5.80106 bits per kmer).
  0:00:46.596    31M / 9068M INFO    General                 (kmer_index_builder.hpp    : 169)   Merging final buckets.
  0:00:47.640    71M / 9068M INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 100)   Building k-mer extensions from k+1-mers
  0:00:49.480    71M / 9068M INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 105)   Building k-mer extensions from k+1-mers finished.
  0:00:49.529    71M / 9068M INFO    General                 (stage.cpp                 : 117)   PROCEDURE == Early tip clipping (id: construction:early_tip_clipper)
  0:00:49.529    71M / 9068M INFO    General                 (construction.cpp          : 301)   Early tip clipper length bound set as (RL - K)
  0:00:49.529    71M / 9068M INFO   Early tip clipping       (early_simplification.hpp  :  47)   Early tip clipping
  0:00:51.691   110M / 9068M INFO   Early tip clipping       (early_simplification.hpp  :  82)   #tipped junctions: 526809
  0:00:51.722   110M / 9068M INFO   Early tip clipping       (early_simplification.hpp  :  93)   Clipped tips: 536499
  0:00:51.748    71M / 9068M INFO   Early tip clipping       (early_simplification.hpp  :  49)   10556420 22-mers were removed by early tip clipper
  0:00:51.748    71M / 9068M INFO    General                 (stage.cpp                 : 117)   PROCEDURE == Condensing graph (id: construction:graph_condensing)
  0:00:51.791    71M / 9068M INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 354)   Extracting unbranching paths
  0:00:54.010   211M / 9068M INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 373)   Extracting unbranching paths finished. 4096249 sequences extracted
  0:00:54.933   211M / 9068M INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 309)   Collecting perfect loops
  0:00:55.298   211M / 9068M INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 342)   Collecting perfect loops finished. 2 loops collected
  0:00:55.561   211M / 9068M INFO    General                 (debruijn_graph_constructor: 487)   Total 8192502 edges to create
  0:00:55.561   528M / 9068M INFO    General                 (debruijn_graph_constructor: 489)   Collecting link records
  0:01:02.187   657M / 9068M INFO    General                 (debruijn_graph_constructor: 491)   Ordering link records
  0:01:02.280   657M / 9068M INFO    General                 (debruijn_graph_constructor: 493)   Sorting done
  0:01:02.333   689M / 9068M INFO    General                 (debruijn_graph_constructor: 503)   Total 2467486 vertices to create
  0:01:02.334   917M / 9068M INFO    General                 (debruijn_graph_constructor: 506)   Connecting the graph
  0:01:07.220   695M / 9068M INFO    General                 (stage.cpp                 : 117)   PROCEDURE == Filling coverage indices (PHM) (id: construction:coverage_filling_phm)
  0:01:07.220   695M / 9068M INFO   K-mer Index Building     (kmer_index_builder.hpp    : 395)   Building perfect hash indices
  0:01:07.633   730M / 9068M INFO   K-mer Index Building     (kmer_index_builder.hpp    : 431)   Index built. Total 43097838 kmers, 31246800 bytes occupied (5.80016 bits per kmer).
  0:01:07.738   899M / 9068M INFO    General                 (coverage_hash_map_builder.:  47)   Collecting k-mer coverage information from reads, this takes a while.
  0:01:33.184   899M / 9068M INFO    General                 (construction.cpp          : 430)   Filling coverage and flanking coverage from PHM
  0:01:35.001   899M / 9068M INFO    General                 (coverage_filling.hpp      :  82)   Processed 8192049 edges
  0:01:35.531   626M / 9068M INFO   StageManager             (stage.cpp                 : 185)   STAGE == EC Threshold Finding (id: ec_threshold_finder)
  0:01:35.536   627M / 9068M INFO    General                 (kmer_coverage_model.cpp   : 181)   Kmer coverage valley at: 38
  0:01:35.536   626M / 9068M INFO    General                 (kmer_coverage_model.cpp   : 201)   K-mer histogram maximum: 319
  0:01:35.536   626M / 9068M INFO    General                 (kmer_coverage_model.cpp   : 237)   Estimated median coverage: 319. Coverage mad: 59.304
  0:01:35.537   626M / 9068M INFO    General                 (kmer_coverage_model.cpp   : 259)   Fitting coverage model
  0:01:35.833   627M / 9068M INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 2
  0:01:36.670   627M / 9068M INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 4
  0:01:40.090   627M / 9068M INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 8
  0:01:43.830   627M / 9068M INFO    General                 (kmer_coverage_model.cpp   : 309)   Fitted mean coverage: 311.371. Fitted coverage std. dev: 61.4807
  0:01:43.843   627M / 9068M INFO    General                 (kmer_coverage_model.cpp   : 334)   Probability of erroneous kmer at valley: 0.981932
  0:01:43.843   627M / 9068M INFO    General                 (kmer_coverage_model.cpp   : 358)   Preliminary threshold calculated as: 122
  0:01:43.843   627M / 9068M INFO    General                 (kmer_coverage_model.cpp   : 362)   Threshold adjusted to: 122
  0:01:43.843   627M / 9068M INFO    General                 (kmer_coverage_model.cpp   : 375)   Estimated genome size (ignoring repeats): 4180645
  0:01:43.843   626M / 9068M INFO    General                 (genomic_info_filler.cpp   :  55)   Mean coverage was calculated as 311.371
  0:01:43.843   626M / 9068M INFO    General                 (genomic_info_filler.cpp   :  70)   EC coverage threshold value was calculated as 122
  0:01:43.843   626M / 9068M INFO    General                 (genomic_info_filler.cpp   :  71)   Trusted kmer low bound: 0
  0:01:43.843   626M / 9068M INFO   StageManager             (stage.cpp                 : 185)   STAGE == Raw Simplification (id: raw_simplification)
  0:01:43.843   626M / 9068M INFO    General                 (simplification.cpp        : 127)   PROCEDURE == Initial cleaning
  0:01:43.844   626M / 9068M INFO    General                 (graph_simplification.hpp  : 662)   Flanking coverage based disconnection disabled
  0:01:43.844   626M / 9068M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Self conjugate edge remover
  0:01:43.986   626M / 9068M INFO   Simplification           (parallel_processing.hpp   : 170)   Self conjugate edge remover triggered 0 times
  0:01:43.986   626M / 9068M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Initial tip clipper
  0:01:44.524   627M / 9068M INFO   Simplification           (parallel_processing.hpp   : 170)   Initial tip clipper triggered 65295 times
  0:01:44.525   627M / 9068M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Initial ec remover
  0:01:56.243   711M / 9068M INFO   Simplification           (parallel_processing.hpp   : 170)   Initial ec remover triggered 1291005 times
  0:01:56.257   711M / 9068M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Initial isolated edge remover
  0:01:56.333   711M / 9068M INFO   Simplification           (parallel_processing.hpp   : 170)   Initial isolated edge remover triggered 8215 times
  0:01:56.341   571M / 9068M INFO   StageManager             (stage.cpp                 : 185)   STAGE == Simplification (id: simplification)
  0:01:56.341   571M / 9068M INFO    General                 (simplification.cpp        : 368)   Graph simplification started
  0:01:56.341   571M / 9068M INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance
  0:01:56.341   571M / 9068M INFO    General                 (simplification.cpp        : 373)   PROCEDURE == Simplification cycle, iteration 1
  0:01:56.341   571M / 9068M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Tip clipper
  0:01:56.620   570M / 9068M INFO   Simplification           (parallel_processing.hpp   : 170)   Tip clipper triggered 46661 times
  0:01:56.625   570M / 9068M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Bulge remover
  0:02:06.496   571M / 9068M INFO   Simplification           (parallel_processing.hpp   : 170)   Bulge remover triggered 23808 times
  0:02:06.500   571M / 9068M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Low coverage edge remover
  0:02:09.748   582M / 9068M INFO   Simplification           (parallel_processing.hpp   : 170)   Low coverage edge remover triggered 306126 times
  0:02:09.756   582M / 9068M INFO    General                 (simplification.cpp        : 373)   PROCEDURE == Simplification cycle, iteration 2
  0:02:09.756   582M / 9068M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Tip clipper
  0:02:09.926   574M / 9068M INFO   Simplification           (parallel_processing.hpp   : 170)   Tip clipper triggered 18093 times
  0:02:09.929   574M / 9068M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Bulge remover
  0:02:10.177   568M / 9068M INFO   Simplification           (parallel_processing.hpp   : 170)   Bulge remover triggered 1903 times
  0:02:10.178   568M / 9068M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Low coverage edge remover
  0:02:10.243   568M / 9068M INFO   Simplification           (parallel_processing.hpp   : 170)   Low coverage edge remover triggered 7530 times
  0:02:10.244   568M / 9068M INFO    General                 (simplification.cpp        : 373)   PROCEDURE == Simplification cycle, iteration 3
  0:02:10.244   568M / 9068M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Tip clipper
  0:02:10.251   568M / 9068M INFO   Simplification           (parallel_processing.hpp   : 170)   Tip clipper triggered 500 times
  0:02:10.251   568M / 9068M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Bulge remover
  0:02:10.324   567M / 9068M INFO   Simplification           (parallel_processing.hpp   : 170)   Bulge remover triggered 233 times
  0:02:10.325   567M / 9068M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Low coverage edge remover
  0:02:10.348   567M / 9068M INFO   Simplification           (parallel_processing.hpp   : 170)   Low coverage edge remover triggered 2438 times
  0:02:10.349   567M / 9068M INFO    General                 (simplification.cpp        : 373)   PROCEDURE == Simplification cycle, iteration 4
  0:02:10.349   567M / 9068M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Tip clipper
  0:02:10.351   567M / 9068M INFO   Simplification           (parallel_processing.hpp   : 170)   Tip clipper triggered 145 times
  0:02:10.351   567M / 9068M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Bulge remover
  0:02:10.379   567M / 9068M INFO   Simplification           (parallel_processing.hpp   : 170)   Bulge remover triggered 54 times
  0:02:10.379   567M / 9068M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Low coverage edge remover
  0:02:10.390   567M / 9068M INFO   Simplification           (parallel_processing.hpp   : 170)   Low coverage edge remover triggered 1213 times
  0:02:10.390   567M / 9068M INFO    General                 (simplification.cpp        : 373)   PROCEDURE == Simplification cycle, iteration 5
  0:02:10.390   567M / 9068M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Tip clipper
  0:02:10.391   567M / 9068M INFO   Simplification           (parallel_processing.hpp   : 170)   Tip clipper triggered 79 times
  0:02:10.392   567M / 9068M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Bulge remover
  0:02:10.411   567M / 9068M INFO   Simplification           (parallel_processing.hpp   : 170)   Bulge remover triggered 48 times
  0:02:10.411   567M / 9068M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Low coverage edge remover
  0:02:10.418   567M / 9068M INFO   Simplification           (parallel_processing.hpp   : 170)   Low coverage edge remover triggered 763 times
  0:02:10.419   567M / 9068M INFO    General                 (simplification.cpp        : 373)   PROCEDURE == Simplification cycle, iteration 6
  0:02:10.419   567M / 9068M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Tip clipper
  0:02:10.420   567M / 9068M INFO   Simplification           (parallel_processing.hpp   : 170)   Tip clipper triggered 54 times
  0:02:10.420   567M / 9068M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Bulge remover
  0:02:10.434   567M / 9068M INFO   Simplification           (parallel_processing.hpp   : 170)   Bulge remover triggered 28 times
  0:02:10.434   567M / 9068M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Low coverage edge remover
  0:02:10.438   567M / 9068M INFO   Simplification           (parallel_processing.hpp   : 170)   Low coverage edge remover triggered 454 times
  0:02:10.438   567M / 9068M INFO    General                 (simplification.cpp        : 373)   PROCEDURE == Simplification cycle, iteration 7
  0:02:10.438   567M / 9068M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Tip clipper
  0:02:10.439   567M / 9068M INFO   Simplification           (parallel_processing.hpp   : 170)   Tip clipper triggered 24 times
  0:02:10.439   567M / 9068M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Bulge remover
  0:02:10.446   567M / 9068M INFO   Simplification           (parallel_processing.hpp   : 170)   Bulge remover triggered 12 times
  0:02:10.446   567M / 9068M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Low coverage edge remover
  0:02:10.450   567M / 9068M INFO   Simplification           (parallel_processing.hpp   : 170)   Low coverage edge remover triggered 366 times
  0:02:10.451   567M / 9068M INFO    General                 (simplification.cpp        : 373)   PROCEDURE == Simplification cycle, iteration 8
  0:02:10.451   567M / 9068M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Tip clipper
  0:02:10.451   567M / 9068M INFO   Simplification           (parallel_processing.hpp   : 170)   Tip clipper triggered 20 times
  0:02:10.451   567M / 9068M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Bulge remover
  0:02:10.455   567M / 9068M INFO   Simplification           (parallel_processing.hpp   : 170)   Bulge remover triggered 13 times
  0:02:10.455   567M / 9068M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Low coverage edge remover
  0:02:10.457   567M / 9068M INFO   Simplification           (parallel_processing.hpp   : 170)   Low coverage edge remover triggered 245 times
  0:02:10.457   567M / 9068M INFO    General                 (simplification.cpp        : 373)   PROCEDURE == Simplification cycle, iteration 9
  0:02:10.457   567M / 9068M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Tip clipper
  0:02:10.457   567M / 9068M INFO   Simplification           (parallel_processing.hpp   : 170)   Tip clipper triggered 8 times
  0:02:10.457   567M / 9068M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Bulge remover
  0:02:10.462   567M / 9068M INFO   Simplification           (parallel_processing.hpp   : 170)   Bulge remover triggered 13 times
  0:02:10.462   567M / 9068M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Low coverage edge remover
  0:02:10.464   567M / 9068M INFO   Simplification           (parallel_processing.hpp   : 170)   Low coverage edge remover triggered 223 times
  0:02:10.464   567M / 9068M INFO    General                 (simplification.cpp        : 373)   PROCEDURE == Simplification cycle, iteration 10
  0:02:10.464   567M / 9068M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Tip clipper
  0:02:10.464   567M / 9068M INFO   Simplification           (parallel_processing.hpp   : 170)   Tip clipper triggered 8 times
  0:02:10.464   567M / 9068M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Bulge remover
  0:02:10.470   567M / 9068M INFO   Simplification           (parallel_processing.hpp   : 170)   Bulge remover triggered 5 times
  0:02:10.470   567M / 9068M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Low coverage edge remover
  0:02:10.472   567M / 9068M INFO   Simplification           (parallel_processing.hpp   : 170)   Low coverage edge remover triggered 186 times
  0:02:10.472   567M / 9068M INFO    General                 (simplification.cpp        : 373)   PROCEDURE == Simplification cycle, iteration 11
  0:02:10.472   567M / 9068M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Tip clipper
  0:02:10.481   567M / 9068M INFO   Simplification           (parallel_processing.hpp   : 170)   Tip clipper triggered 42 times
  0:02:10.481   567M / 9068M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Bulge remover
  0:02:10.504   567M / 9068M INFO   Simplification           (parallel_processing.hpp   : 170)   Bulge remover triggered 12 times
  0:02:10.504   567M / 9068M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Low coverage edge remover
  0:02:10.512   550M / 9068M INFO   Simplification           (parallel_processing.hpp   : 170)   Low coverage edge remover triggered 1 times
  0:02:10.512   550M / 9068M INFO    General                 (simplification.cpp        : 373)   PROCEDURE == Simplification cycle, iteration 12
  0:02:10.512   550M / 9068M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Tip clipper
  0:02:10.512   550M / 9068M INFO   Simplification           (parallel_processing.hpp   : 170)   Tip clipper triggered 1 times
  0:02:10.512   550M / 9068M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Bulge remover
  0:02:10.512   550M / 9068M INFO   Simplification           (parallel_processing.hpp   : 170)   Bulge remover triggered 0 times
  0:02:10.512   550M / 9068M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Low coverage edge remover
  0:02:10.512   550M / 9068M INFO   Simplification           (parallel_processing.hpp   : 170)   Low coverage edge remover triggered 0 times
  0:02:10.512   550M / 9068M INFO    General                 (simplification.cpp        : 373)   PROCEDURE == Simplification cycle, iteration 13
  0:02:10.512   550M / 9068M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Tip clipper
  0:02:10.512   550M / 9068M INFO   Simplification           (parallel_processing.hpp   : 170)   Tip clipper triggered 0 times
  0:02:10.512   550M / 9068M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Bulge remover
  0:02:10.512   550M / 9068M INFO   Simplification           (parallel_processing.hpp   : 170)   Bulge remover triggered 0 times
  0:02:10.512   550M / 9068M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Low coverage edge remover
  0:02:10.512   550M / 9068M INFO   Simplification           (parallel_processing.hpp   : 170)   Low coverage edge remover triggered 0 times
  0:02:10.519   549M / 9068M INFO   StageManager             (stage.cpp                 : 185)   STAGE == Simplification Cleanup (id: simplification_cleanup)
  0:02:10.519   549M / 9068M INFO    General                 (simplification.cpp        : 176)   PROCEDURE == Post simplification
  0:02:10.519   549M / 9068M INFO    General                 (graph_simplification.hpp  : 448)   Disconnection of relatively low covered edges disabled
  0:02:10.519   549M / 9068M INFO    General                 (graph_simplification.hpp  : 485)   Complex tip clipping disabled
  0:02:10.519   549M / 9068M INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance
  0:02:10.519   549M / 9068M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Tip clipper
  0:02:10.526   549M / 9068M INFO   Simplification           (parallel_processing.hpp   : 170)   Tip clipper triggered 0 times
  0:02:10.526   549M / 9068M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Bulge remover
  0:02:10.545   549M / 9068M INFO   Simplification           (parallel_processing.hpp   : 170)   Bulge remover triggered 0 times
  0:02:10.546   549M / 9068M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Tip clipper
  0:02:10.552   549M / 9068M INFO   Simplification           (parallel_processing.hpp   : 170)   Tip clipper triggered 0 times
  0:02:10.552   549M / 9068M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Bulge remover
  0:02:10.571   549M / 9068M INFO   Simplification           (parallel_processing.hpp   : 170)   Bulge remover triggered 0 times
  0:02:10.571   549M / 9068M INFO    General                 (simplification.cpp        : 327)   Disrupting self-conjugate edges
  0:02:10.580   549M / 9068M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Removing isolated edges
  0:02:10.589   549M / 9068M INFO   Simplification           (parallel_processing.hpp   : 170)   Removing isolated edges triggered 524 times
  0:02:10.598   549M / 9068M INFO    General                 (simplification.cpp        : 495)   After simplification:
  0:02:10.599   549M / 9068M INFO    General                 (simplification.cpp        : 496)     Average coverage = 293.316
  0:02:10.610   549M / 9068M INFO    General                 (simplification.cpp        : 497)     Total length = 4626204
  0:02:10.621   549M / 9068M INFO    General                 (simplification.cpp        : 498)     Median edge length: 3896
  0:02:10.621   549M / 9068M INFO    General                 (simplification.cpp        : 499)     Edges: 20899
  0:02:10.621   549M / 9068M INFO    General                 (simplification.cpp        : 500)     Vertices: 19340
  0:02:10.621   549M / 9068M INFO   StageManager             (stage.cpp                 : 185)   STAGE == Contig Output (id: contig_output)
  0:02:10.621   549M / 9068M INFO    General                 (read_converter.cpp        : 107)   Outputting contigs to /bios-store5/lyt/test_sample/sample3/spades_result_unique_new/K21/simplified_contigs
  0:02:10.643   552M / 9068M INFO    General                 (binary_converter.cpp      : 111)   10484 reads written
  0:02:10.653   549M / 9068M INFO    General                 (pipeline.cpp              : 287)   SPAdes finished
  0:02:10.745     1M / 9068M INFO    General                 (main.cpp                  : 136)   Assembling time: 0 hours 2 minutes 10 seconds

===== K21 finished. 


===== K33 started. 


== Running: /bios-store5/lyt/python_demo_try/SeriesAnalysis/SPAdes-3.15.5-Linux/bin/spades-core /bios-store5/lyt/test_sample/sample3/spades_result_unique_new/K33/configs/config.info

  0:00:00.000     1M / 11M   INFO    General                 (main.cpp                  :  99)   Loaded config from /bios-store5/lyt/test_sample/sample3/spades_result_unique_new/K33/configs/config.info
  0:00:00.000     1M / 11M   INFO    General                 (memory_limit.cpp          :  54)   Memory limit set to 125 Gb
  0:00:00.000     1M / 11M   INFO    General                 (main.cpp                  : 107)   Starting SPAdes, built from refs/heads/spades_3.15.5, git revision e757b8216f9a038fb616e9551a2d4891b2d19ad7
  0:00:00.000     1M / 11M   INFO    General                 (main.cpp                  : 108)   Maximum k-mer length: 128
  0:00:00.000     1M / 11M   INFO    General                 (main.cpp                  : 109)   Assembling dataset (/bios-store5/lyt/test_sample/sample3/spades_result_unique_new/dataset.info) with K=33
  0:00:00.001     1M / 11M   INFO    General                 (main.cpp                  : 110)   Maximum # of threads to use (adjusted due to OMP capabilities): 16
  0:00:00.001     1M / 11M   INFO    General                 (pipeline.cpp              : 212)   SPAdes started
  0:00:00.001     1M / 11M   INFO    General                 (pipeline.cpp              : 225)   Starting from stage: read_conversion
  0:00:00.001     1M / 11M   INFO    General                 (pipeline.cpp              : 231)   Two-step repeat resolution disabled
  0:00:00.001     1M / 11M   INFO   GraphCore                (graph_core.hpp            : 672)   Graph created, vertex min_id: 3, edge min_id: 3
  0:00:00.001     1M / 11M   INFO   GraphCore                (graph_core.hpp            : 673)   Vertex size: 48, edge size: 40
  0:00:00.001     1M / 11M   INFO    General                 (edge_index.hpp            : 113)   Size of edge index entries: 12/8
  0:00:00.001     1M / 11M   INFO   StageManager             (stage.cpp                 : 185)   STAGE == Binary Read Conversion (id: read_conversion)
  0:00:00.003     1M / 11M   INFO    General                 (read_converter.cpp        :  53)   Binary reads detected
  0:00:00.004     1M / 11M   INFO   StageManager             (stage.cpp                 : 185)   STAGE == de Bruijn graph construction (id: construction)
  0:00:00.004     1M / 11M   INFO    General                 (construction.cpp          : 118)   Contigs from previous K will be used: /bios-store5/lyt/test_sample/sample3/spades_result_unique_new/K21/simplified_contigs
  0:00:00.070     1M / 11M   INFO    General                 (construction.cpp          : 153)   Max read length 150
  0:00:00.070     1M / 11M   INFO    General                 (construction.cpp          : 159)   Average read length 111.138
  0:00:00.070     1M / 11M   INFO    General                 (stage.cpp                 : 117)   PROCEDURE == k+1-mer counting (id: construction:kpomer_counting)
  0:00:00.070     1M / 11M   INFO    General                 (kmer_index_builder.hpp    : 243)   Splitting kmer instances into 160 files using 16 threads. This might take a while.
  0:00:00.072     1M / 11M   INFO    General                 (file_limit.hpp            :  42)   Open file limit set to 1024
  0:00:00.072     1M / 11M   INFO    General                 (kmer_splitter.hpp         :  93)   Memory available for splitting buffers: 2.60415 Gb
  0:00:00.072     1M / 11M   INFO    General                 (kmer_splitter.hpp         : 101)   Using cell size of 209715
  0:00:08.988  9601M / 9601M INFO    General                 (kmer_splitters.hpp        : 125)   Processed 13421447 reads
  0:00:17.255  9601M / 9601M INFO    General                 (kmer_splitters.hpp        : 125)   Processed 26860634 reads
  0:00:20.120  9601M / 9601M INFO    General                 (kmer_splitters.hpp        : 125)   Processed 31326670 reads
  0:00:20.123     1M / 9402M INFO    General                 (kmer_splitters.hpp        : 131)   Used 31326670 reads
  0:00:21.283     1M / 9402M INFO    General                 (kmer_index_builder.hpp    : 249)   Starting k-mer counting.
  0:00:24.231     1M / 9402M INFO    General                 (kmer_index_builder.hpp    : 260)   K-mer counting done. There are 49026435 kmers in total.
  0:00:24.232     1M / 9402M INFO    General                 (stage.cpp                 : 117)   PROCEDURE == Extension index construction (id: construction:extension_index_construction)
  0:00:24.404     1M / 9402M INFO   K-mer Index Building     (kmer_index_builder.hpp    : 438)   Building kmer index
  0:00:24.404     1M / 9402M INFO    General                 (kmer_index_builder.hpp    : 243)   Splitting kmer instances into 160 files using 16 threads. This might take a while.
  0:00:24.405     1M / 9402M INFO    General                 (file_limit.hpp            :  42)   Open file limit set to 1024
  0:00:24.405     1M / 9402M INFO    General                 (kmer_splitter.hpp         :  93)   Memory available for splitting buffers: 2.60415 Gb
  0:00:24.405     1M / 9402M INFO    General                 (kmer_splitter.hpp         : 101)   Using cell size of 209715
  0:00:28.201  9602M / 9602M INFO    General                 (kmer_splitters.hpp        : 194)   Processed 49026435 kmers
  0:00:28.201  9602M / 9602M INFO    General                 (kmer_splitters.hpp        : 199)   Used 49026435 kmers.
  0:00:28.212     2M / 9402M INFO    General                 (kmer_index_builder.hpp    : 249)   Starting k-mer counting.
  0:00:30.534     2M / 9402M INFO    General                 (kmer_index_builder.hpp    : 260)   K-mer counting done. There are 48818448 kmers in total.
  0:00:30.535     2M / 9402M INFO   K-mer Index Building     (kmer_index_builder.hpp    : 395)   Building perfect hash indices
  0:00:31.631    39M / 9402M INFO   K-mer Index Building     (kmer_index_builder.hpp    : 431)   Index built. Total 48818448 kmers, 35378736 bytes occupied (5.7976 bits per kmer).
  0:00:31.631    39M / 9402M INFO    General                 (kmer_index_builder.hpp    : 169)   Merging final buckets.
  0:00:33.796    87M / 9402M INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 100)   Building k-mer extensions from k+1-mers
  0:00:36.190    87M / 9402M INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 105)   Building k-mer extensions from k+1-mers finished.
  0:00:36.270    87M / 9402M INFO    General                 (stage.cpp                 : 117)   PROCEDURE == Early tip clipping (id: construction:early_tip_clipper)
  0:00:36.270    87M / 9402M INFO    General                 (construction.cpp          : 301)   Early tip clipper length bound set as (RL - K)
  0:00:36.270    87M / 9402M INFO   Early tip clipping       (early_simplification.hpp  :  47)   Early tip clipping
  0:00:38.449   126M / 9402M INFO   Early tip clipping       (early_simplification.hpp  :  82)   #tipped junctions: 493800
  0:00:38.482   126M / 9402M INFO   Early tip clipping       (early_simplification.hpp  :  93)   Clipped tips: 507020
  0:00:38.546    87M / 9402M INFO   Early tip clipping       (early_simplification.hpp  :  49)   19515724 34-mers were removed by early tip clipper
  0:00:38.546    87M / 9402M INFO    General                 (stage.cpp                 : 117)   PROCEDURE == Condensing graph (id: construction:graph_condensing)
  0:00:38.589    87M / 9402M INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 354)   Extracting unbranching paths
  0:00:40.756   147M / 9402M INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 373)   Extracting unbranching paths finished. 1260534 sequences extracted
  0:00:41.675   147M / 9402M INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 309)   Collecting perfect loops
  0:00:42.115   147M / 9402M INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 342)   Collecting perfect loops finished. 7 loops collected
  0:00:42.224   147M / 9402M INFO    General                 (debruijn_graph_constructor: 487)   Total 2521082 edges to create
  0:00:42.224   248M / 9402M INFO    General                 (debruijn_graph_constructor: 489)   Collecting link records
  0:00:44.236   288M / 9402M INFO    General                 (debruijn_graph_constructor: 491)   Ordering link records
  0:00:44.265   288M / 9402M INFO    General                 (debruijn_graph_constructor: 493)   Sorting done
  0:00:44.285   304M / 9402M INFO    General                 (debruijn_graph_constructor: 503)   Total 1052554 vertices to create
  0:00:44.285   404M / 9402M INFO    General                 (debruijn_graph_constructor: 506)   Connecting the graph
  0:00:46.305   329M / 9402M INFO    General                 (stage.cpp                 : 117)   PROCEDURE == Filling coverage indices (PHM) (id: construction:coverage_filling_phm)
  0:00:46.306   329M / 9402M INFO   K-mer Index Building     (kmer_index_builder.hpp    : 395)   Building perfect hash indices
  0:00:47.022   366M / 9402M INFO   K-mer Index Building     (kmer_index_builder.hpp    : 431)   Index built. Total 49026435 kmers, 35529920 bytes occupied (5.79768 bits per kmer).
  0:00:47.144   554M / 9402M INFO    General                 (coverage_hash_map_builder.:  47)   Collecting k-mer coverage information from reads, this takes a while.
  0:01:11.086   554M / 9402M INFO    General                 (construction.cpp          : 430)   Filling coverage and flanking coverage from PHM
  0:01:12.650   554M / 9402M INFO    General                 (coverage_filling.hpp      :  82)   Processed 2521020 edges
  0:01:13.650   243M / 9402M INFO   StageManager             (stage.cpp                 : 185)   STAGE == EC Threshold Finding (id: ec_threshold_finder)
  0:01:13.653   244M / 9402M INFO    General                 (kmer_coverage_model.cpp   : 181)   Kmer coverage valley at: 52
  0:01:13.653   243M / 9402M INFO    General                 (kmer_coverage_model.cpp   : 201)   K-mer histogram maximum: 272
  0:01:13.653   243M / 9402M INFO    General                 (kmer_coverage_model.cpp   : 237)   Estimated median coverage: 272. Coverage mad: 56.3388
  0:01:13.653   243M / 9402M INFO    General                 (kmer_coverage_model.cpp   : 259)   Fitting coverage model
  0:01:13.896   244M / 9402M INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 2
  0:01:14.541   244M / 9402M INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 4
  0:01:16.400   244M / 9402M INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 8
  0:01:22.975   244M / 9402M INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 16
  0:01:25.315   244M / 9402M INFO    General                 (kmer_coverage_model.cpp   : 309)   Fitted mean coverage: 269.041. Fitted coverage std. dev: 57.6194
  0:01:25.325   244M / 9402M INFO    General                 (kmer_coverage_model.cpp   : 334)   Probability of erroneous kmer at valley: 0.794186
  0:01:25.326   244M / 9402M INFO    General                 (kmer_coverage_model.cpp   : 358)   Preliminary threshold calculated as: 104
  0:01:25.326   244M / 9402M INFO    General                 (kmer_coverage_model.cpp   : 362)   Threshold adjusted to: 104
  0:01:25.326   244M / 9402M INFO    General                 (kmer_coverage_model.cpp   : 375)   Estimated genome size (ignoring repeats): 4193808
  0:01:25.326   243M / 9402M INFO    General                 (genomic_info_filler.cpp   :  55)   Mean coverage was calculated as 269.041
  0:01:25.326   243M / 9402M INFO    General                 (genomic_info_filler.cpp   :  70)   EC coverage threshold value was calculated as 104
  0:01:25.326   243M / 9402M INFO    General                 (genomic_info_filler.cpp   :  71)   Trusted kmer low bound: 0
  0:01:25.326   243M / 9402M INFO   StageManager             (stage.cpp                 : 185)   STAGE == Raw Simplification (id: raw_simplification)
  0:01:25.326   243M / 9402M INFO    General                 (simplification.cpp        : 127)   PROCEDURE == Initial cleaning
  0:01:25.326   243M / 9402M INFO    General                 (graph_simplification.hpp  : 662)   Flanking coverage based disconnection disabled
  0:01:25.326   243M / 9402M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Self conjugate edge remover
  0:01:25.385   243M / 9402M INFO   Simplification           (parallel_processing.hpp   : 170)   Self conjugate edge remover triggered 2 times
  0:01:25.385   243M / 9402M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Initial tip clipper
  0:01:26.308   241M / 9402M INFO   Simplification           (parallel_processing.hpp   : 170)   Initial tip clipper triggered 145181 times
  0:01:26.311   241M / 9402M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Initial ec remover
  0:01:28.336   245M / 9402M INFO   Simplification           (parallel_processing.hpp   : 170)   Initial ec remover triggered 202524 times
  0:01:28.341   245M / 9402M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Initial isolated edge remover
  0:01:28.522   243M / 9402M INFO   Simplification           (parallel_processing.hpp   : 170)   Initial isolated edge remover triggered 82231 times
  0:01:28.524   215M / 9402M INFO   StageManager             (stage.cpp                 : 185)   STAGE == Simplification (id: simplification)
  0:01:28.524   215M / 9402M INFO    General                 (simplification.cpp        : 368)   Graph simplification started
  0:01:28.524   215M / 9402M INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance
  0:01:28.524   215M / 9402M INFO    General                 (simplification.cpp        : 373)   PROCEDURE == Simplification cycle, iteration 1
  0:01:28.524   215M / 9402M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Tip clipper
  0:01:28.794   213M / 9402M INFO   Simplification           (parallel_processing.hpp   : 170)   Tip clipper triggered 43912 times
  0:01:28.805   213M / 9402M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Bulge remover
  0:01:30.208   212M / 9402M INFO   Simplification           (parallel_processing.hpp   : 170)   Bulge remover triggered 19460 times
  0:01:30.212   212M / 9402M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Low coverage edge remover
  0:01:30.932   215M / 9402M INFO   Simplification           (parallel_processing.hpp   : 170)   Low coverage edge remover triggered 62129 times
  0:01:30.936   215M / 9402M INFO    General                 (simplification.cpp        : 373)   PROCEDURE == Simplification cycle, iteration 2
  0:01:30.936   215M / 9402M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Tip clipper
  0:01:31.098   210M / 9402M INFO   Simplification           (parallel_processing.hpp   : 170)   Tip clipper triggered 17683 times
  0:01:31.100   210M / 9402M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Bulge remover
  0:01:31.263   207M / 9402M INFO   Simplification           (parallel_processing.hpp   : 170)   Bulge remover triggered 1307 times
  0:01:31.264   207M / 9402M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Low coverage edge remover
  0:01:31.314   208M / 9402M INFO   Simplification           (parallel_processing.hpp   : 170)   Low coverage edge remover triggered 4508 times
  0:01:31.315   208M / 9402M INFO    General                 (simplification.cpp        : 373)   PROCEDURE == Simplification cycle, iteration 3
  0:01:31.315   208M / 9402M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Tip clipper
  0:01:31.325   207M / 9402M INFO   Simplification           (parallel_processing.hpp   : 170)   Tip clipper triggered 649 times
  0:01:31.325   207M / 9402M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Bulge remover
  0:01:31.358   207M / 9402M INFO   Simplification           (parallel_processing.hpp   : 170)   Bulge remover triggered 134 times
  0:01:31.358   207M / 9402M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Low coverage edge remover
  0:01:31.372   207M / 9402M INFO   Simplification           (parallel_processing.hpp   : 170)   Low coverage edge remover triggered 1374 times
  0:01:31.372   207M / 9402M INFO    General                 (simplification.cpp        : 373)   PROCEDURE == Simplification cycle, iteration 4
  0:01:31.372   207M / 9402M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Tip clipper
  0:01:31.374   207M / 9402M INFO   Simplification           (parallel_processing.hpp   : 170)   Tip clipper triggered 218 times
  0:01:31.374   207M / 9402M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Bulge remover
  0:01:31.385   206M / 9402M INFO   Simplification           (parallel_processing.hpp   : 170)   Bulge remover triggered 29 times
  0:01:31.385   206M / 9402M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Low coverage edge remover
  0:01:31.391   206M / 9402M INFO   Simplification           (parallel_processing.hpp   : 170)   Low coverage edge remover triggered 643 times
  0:01:31.392   206M / 9402M INFO    General                 (simplification.cpp        : 373)   PROCEDURE == Simplification cycle, iteration 5
  0:01:31.392   206M / 9402M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Tip clipper
  0:01:31.393   206M / 9402M INFO   Simplification           (parallel_processing.hpp   : 170)   Tip clipper triggered 83 times
  0:01:31.393   206M / 9402M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Bulge remover
  0:01:31.399   206M / 9402M INFO   Simplification           (parallel_processing.hpp   : 170)   Bulge remover triggered 10 times
  0:01:31.399   206M / 9402M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Low coverage edge remover
  0:01:31.403   206M / 9402M INFO   Simplification           (parallel_processing.hpp   : 170)   Low coverage edge remover triggered 376 times
  0:01:31.403   206M / 9402M INFO    General                 (simplification.cpp        : 373)   PROCEDURE == Simplification cycle, iteration 6
  0:01:31.403   206M / 9402M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Tip clipper
  0:01:31.404   206M / 9402M INFO   Simplification           (parallel_processing.hpp   : 170)   Tip clipper triggered 54 times
  0:01:31.404   206M / 9402M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Bulge remover
  0:01:31.407   206M / 9402M INFO   Simplification           (parallel_processing.hpp   : 170)   Bulge remover triggered 3 times
  0:01:31.407   206M / 9402M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Low coverage edge remover
  0:01:31.410   206M / 9402M INFO   Simplification           (parallel_processing.hpp   : 170)   Low coverage edge remover triggered 248 times
  0:01:31.410   206M / 9402M INFO    General                 (simplification.cpp        : 373)   PROCEDURE == Simplification cycle, iteration 7
  0:01:31.410   206M / 9402M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Tip clipper
  0:01:31.410   206M / 9402M INFO   Simplification           (parallel_processing.hpp   : 170)   Tip clipper triggered 36 times
  0:01:31.410   206M / 9402M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Bulge remover
  0:01:31.412   206M / 9402M INFO   Simplification           (parallel_processing.hpp   : 170)   Bulge remover triggered 7 times
  0:01:31.413   206M / 9402M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Low coverage edge remover
  0:01:31.415   206M / 9402M INFO   Simplification           (parallel_processing.hpp   : 170)   Low coverage edge remover triggered 167 times
  0:01:31.415   206M / 9402M INFO    General                 (simplification.cpp        : 373)   PROCEDURE == Simplification cycle, iteration 8
  0:01:31.415   206M / 9402M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Tip clipper
  0:01:31.415   206M / 9402M INFO   Simplification           (parallel_processing.hpp   : 170)   Tip clipper triggered 31 times
  0:01:31.415   206M / 9402M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Bulge remover
  0:01:31.416   206M / 9402M INFO   Simplification           (parallel_processing.hpp   : 170)   Bulge remover triggered 5 times
  0:01:31.416   206M / 9402M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Low coverage edge remover
  0:01:31.418   206M / 9402M INFO   Simplification           (parallel_processing.hpp   : 170)   Low coverage edge remover triggered 135 times
  0:01:31.418   206M / 9402M INFO    General                 (simplification.cpp        : 373)   PROCEDURE == Simplification cycle, iteration 9
  0:01:31.418   206M / 9402M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Tip clipper
  0:01:31.418   206M / 9402M INFO   Simplification           (parallel_processing.hpp   : 170)   Tip clipper triggered 21 times
  0:01:31.418   206M / 9402M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Bulge remover
  0:01:31.420   206M / 9402M INFO   Simplification           (parallel_processing.hpp   : 170)   Bulge remover triggered 5 times
  0:01:31.420   206M / 9402M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Low coverage edge remover
  0:01:31.420   206M / 9402M INFO   Simplification           (parallel_processing.hpp   : 170)   Low coverage edge remover triggered 79 times
  0:01:31.421   206M / 9402M INFO    General                 (simplification.cpp        : 373)   PROCEDURE == Simplification cycle, iteration 10
  0:01:31.421   206M / 9402M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Tip clipper
  0:01:31.421   206M / 9402M INFO   Simplification           (parallel_processing.hpp   : 170)   Tip clipper triggered 21 times
  0:01:31.421   206M / 9402M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Bulge remover
  0:01:31.422   206M / 9402M INFO   Simplification           (parallel_processing.hpp   : 170)   Bulge remover triggered 2 times
  0:01:31.422   206M / 9402M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Low coverage edge remover
  0:01:31.422   206M / 9402M INFO   Simplification           (parallel_processing.hpp   : 170)   Low coverage edge remover triggered 65 times
  0:01:31.422   206M / 9402M INFO    General                 (simplification.cpp        : 373)   PROCEDURE == Simplification cycle, iteration 11
  0:01:31.422   206M / 9402M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Tip clipper
  0:01:31.434   206M / 9402M INFO   Simplification           (parallel_processing.hpp   : 170)   Tip clipper triggered 52 times
  0:01:31.434   206M / 9402M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Bulge remover
  0:01:31.441   206M / 9402M INFO   Simplification           (parallel_processing.hpp   : 170)   Bulge remover triggered 6 times
  0:01:31.441   206M / 9402M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Low coverage edge remover
  0:01:31.444   204M / 9402M INFO   Simplification           (parallel_processing.hpp   : 170)   Low coverage edge remover triggered 0 times
  0:01:31.444   204M / 9402M INFO    General                 (simplification.cpp        : 373)   PROCEDURE == Simplification cycle, iteration 12
  0:01:31.444   204M / 9402M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Tip clipper
  0:01:31.444   204M / 9402M INFO   Simplification           (parallel_processing.hpp   : 170)   Tip clipper triggered 2 times
  0:01:31.444   204M / 9402M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Bulge remover
  0:01:31.444   204M / 9402M INFO   Simplification           (parallel_processing.hpp   : 170)   Bulge remover triggered 0 times
  0:01:31.444   204M / 9402M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Low coverage edge remover
  0:01:31.444   204M / 9402M INFO   Simplification           (parallel_processing.hpp   : 170)   Low coverage edge remover triggered 0 times
  0:01:31.444   204M / 9402M INFO    General                 (simplification.cpp        : 373)   PROCEDURE == Simplification cycle, iteration 13
  0:01:31.444   204M / 9402M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Tip clipper
  0:01:31.444   204M / 9402M INFO   Simplification           (parallel_processing.hpp   : 170)   Tip clipper triggered 0 times
  0:01:31.444   204M / 9402M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Bulge remover
  0:01:31.444   204M / 9402M INFO   Simplification           (parallel_processing.hpp   : 170)   Bulge remover triggered 0 times
  0:01:31.444   204M / 9402M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Low coverage edge remover
  0:01:31.444   204M / 9402M INFO   Simplification           (parallel_processing.hpp   : 170)   Low coverage edge remover triggered 0 times
  0:01:31.448   204M / 9402M INFO   StageManager             (stage.cpp                 : 185)   STAGE == Simplification Cleanup (id: simplification_cleanup)
  0:01:31.448   204M / 9402M INFO    General                 (simplification.cpp        : 176)   PROCEDURE == Post simplification
  0:01:31.449   204M / 9402M INFO    General                 (graph_simplification.hpp  : 448)   Disconnection of relatively low covered edges disabled
  0:01:31.449   204M / 9402M INFO    General                 (graph_simplification.hpp  : 485)   Complex tip clipping disabled
  0:01:31.449   204M / 9402M INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance
  0:01:31.449   204M / 9402M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Tip clipper
  0:01:31.452   204M / 9402M INFO   Simplification           (parallel_processing.hpp   : 170)   Tip clipper triggered 0 times
  0:01:31.452   204M / 9402M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Bulge remover
  0:01:31.457   204M / 9402M INFO   Simplification           (parallel_processing.hpp   : 170)   Bulge remover triggered 0 times
  0:01:31.457   204M / 9402M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Tip clipper
  0:01:31.461   204M / 9402M INFO   Simplification           (parallel_processing.hpp   : 170)   Tip clipper triggered 0 times
  0:01:31.461   204M / 9402M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Bulge remover
  0:01:31.466   204M / 9402M INFO   Simplification           (parallel_processing.hpp   : 170)   Bulge remover triggered 0 times
  0:01:31.466   204M / 9402M INFO    General                 (simplification.cpp        : 327)   Disrupting self-conjugate edges
  0:01:31.471   204M / 9402M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Removing isolated edges
  0:01:31.476   204M / 9402M INFO   Simplification           (parallel_processing.hpp   : 170)   Removing isolated edges triggered 1779 times
  0:01:31.480   204M / 9402M INFO    General                 (simplification.cpp        : 495)   After simplification:
  0:01:31.480   204M / 9402M INFO    General                 (simplification.cpp        : 496)     Average coverage = 254.76
  0:01:31.484   204M / 9402M INFO    General                 (simplification.cpp        : 497)     Total length = 4579179
  0:01:31.487   204M / 9402M INFO    General                 (simplification.cpp        : 498)     Median edge length: 29529
  0:01:31.487   204M / 9402M INFO    General                 (simplification.cpp        : 499)     Edges: 8974
  0:01:31.487   204M / 9402M INFO    General                 (simplification.cpp        : 500)     Vertices: 11436
  0:01:31.487   204M / 9402M INFO   StageManager             (stage.cpp                 : 185)   STAGE == Contig Output (id: contig_output)
  0:01:31.487   204M / 9402M INFO    General                 (read_converter.cpp        : 107)   Outputting contigs to /bios-store5/lyt/test_sample/sample3/spades_result_unique_new/K33/simplified_contigs
  0:01:31.571   206M / 9402M INFO    General                 (binary_converter.cpp      : 111)   4494 reads written
  0:01:31.601   204M / 9402M INFO    General                 (pipeline.cpp              : 287)   SPAdes finished
  0:01:31.639     1M / 9402M INFO    General                 (main.cpp                  : 136)   Assembling time: 0 hours 1 minutes 31 seconds

===== K33 finished. 


===== K55 started. 


== Running: /bios-store5/lyt/python_demo_try/SeriesAnalysis/SPAdes-3.15.5-Linux/bin/spades-core /bios-store5/lyt/test_sample/sample3/spades_result_unique_new/K55/configs/config.info

  0:00:00.000     1M / 11M   INFO    General                 (main.cpp                  :  99)   Loaded config from /bios-store5/lyt/test_sample/sample3/spades_result_unique_new/K55/configs/config.info
  0:00:00.000     1M / 11M   INFO    General                 (memory_limit.cpp          :  54)   Memory limit set to 125 Gb
  0:00:00.001     1M / 11M   INFO    General                 (main.cpp                  : 107)   Starting SPAdes, built from refs/heads/spades_3.15.5, git revision e757b8216f9a038fb616e9551a2d4891b2d19ad7
  0:00:00.001     1M / 11M   INFO    General                 (main.cpp                  : 108)   Maximum k-mer length: 128
  0:00:00.001     1M / 11M   INFO    General                 (main.cpp                  : 109)   Assembling dataset (/bios-store5/lyt/test_sample/sample3/spades_result_unique_new/dataset.info) with K=55
  0:00:00.001     1M / 11M   INFO    General                 (main.cpp                  : 110)   Maximum # of threads to use (adjusted due to OMP capabilities): 16
  0:00:00.001     1M / 11M   INFO    General                 (pipeline.cpp              : 212)   SPAdes started
  0:00:00.001     1M / 11M   INFO    General                 (pipeline.cpp              : 225)   Starting from stage: read_conversion
  0:00:00.001     1M / 11M   INFO    General                 (pipeline.cpp              : 231)   Two-step repeat resolution disabled
  0:00:00.001     1M / 11M   INFO   GraphCore                (graph_core.hpp            : 672)   Graph created, vertex min_id: 3, edge min_id: 3
  0:00:00.001     1M / 11M   INFO   GraphCore                (graph_core.hpp            : 673)   Vertex size: 48, edge size: 40
  0:00:00.001     1M / 11M   INFO    General                 (edge_index.hpp            : 113)   Size of edge index entries: 12/8
  0:00:00.001     1M / 11M   INFO    General                 (pipeline.cpp              : 242)   Will need read mapping, kmer mapper will be attached
  0:00:00.002     1M / 11M   INFO   StageManager             (stage.cpp                 : 185)   STAGE == Binary Read Conversion (id: read_conversion)
  0:00:00.003     1M / 11M   INFO    General                 (read_converter.cpp        :  53)   Binary reads detected
  0:00:00.004     1M / 11M   INFO   StageManager             (stage.cpp                 : 185)   STAGE == de Bruijn graph construction (id: construction)
  0:00:00.005     1M / 11M   INFO    General                 (construction.cpp          : 118)   Contigs from previous K will be used: /bios-store5/lyt/test_sample/sample3/spades_result_unique_new/K33/simplified_contigs
  0:00:00.070     1M / 11M   INFO    General                 (construction.cpp          : 153)   Max read length 150
  0:00:00.070     1M / 11M   INFO    General                 (construction.cpp          : 159)   Average read length 111.138
  0:00:00.070     1M / 11M   INFO    General                 (stage.cpp                 : 117)   PROCEDURE == k+1-mer counting (id: construction:kpomer_counting)
  0:00:00.070     1M / 11M   INFO    General                 (kmer_index_builder.hpp    : 243)   Splitting kmer instances into 160 files using 16 threads. This might take a while.
  0:00:00.072     1M / 11M   INFO    General                 (file_limit.hpp            :  42)   Open file limit set to 1024
  0:00:00.072     1M / 11M   INFO    General                 (kmer_splitter.hpp         :  93)   Memory available for splitting buffers: 2.60415 Gb
  0:00:00.072     1M / 11M   INFO    General                 (kmer_splitter.hpp         : 101)   Using cell size of 209715
  0:00:09.192  9601M / 9601M INFO    General                 (kmer_splitters.hpp        : 125)   Processed 18621846 reads
  0:00:14.522  9601M / 9601M INFO    General                 (kmer_splitters.hpp        : 125)   Processed 31314690 reads
  0:00:14.587     1M / 9278M INFO    General                 (kmer_splitters.hpp        : 131)   Used 31314690 reads
  0:00:15.719     1M / 9278M INFO    General                 (kmer_index_builder.hpp    : 249)   Starting k-mer counting.
  0:00:18.445     1M / 9278M INFO    General                 (kmer_index_builder.hpp    : 260)   K-mer counting done. There are 49132043 kmers in total.
  0:00:18.449     1M / 9278M INFO    General                 (stage.cpp                 : 117)   PROCEDURE == Extension index construction (id: construction:extension_index_construction)
  0:00:18.631     1M / 9278M INFO   K-mer Index Building     (kmer_index_builder.hpp    : 438)   Building kmer index
  0:00:18.631     1M / 9278M INFO    General                 (kmer_index_builder.hpp    : 243)   Splitting kmer instances into 160 files using 16 threads. This might take a while.
  0:00:18.632     1M / 9278M INFO    General                 (file_limit.hpp            :  42)   Open file limit set to 1024
  0:00:18.632     1M / 9278M INFO    General                 (kmer_splitter.hpp         :  93)   Memory available for splitting buffers: 2.60415 Gb
  0:00:18.632     1M / 9278M INFO    General                 (kmer_splitter.hpp         : 101)   Using cell size of 209715
  0:00:22.520  9602M / 9602M INFO    General                 (kmer_splitters.hpp        : 194)   Processed 49132043 kmers
  0:00:22.520  9602M / 9602M INFO    General                 (kmer_splitters.hpp        : 199)   Used 49132043 kmers.
  0:00:22.524     2M / 9278M INFO    General                 (kmer_index_builder.hpp    : 249)   Starting k-mer counting.
  0:00:24.909     2M / 9278M INFO    General                 (kmer_index_builder.hpp    : 260)   K-mer counting done. There are 49316325 kmers in total.
  0:00:24.911     2M / 9278M INFO   K-mer Index Building     (kmer_index_builder.hpp    : 395)   Building perfect hash indices
  0:00:26.007    39M / 9278M INFO   K-mer Index Building     (kmer_index_builder.hpp    : 431)   Index built. Total 49316325 kmers, 35739656 bytes occupied (5.79762 bits per kmer).
  0:00:26.007    39M / 9278M INFO    General                 (kmer_index_builder.hpp    : 169)   Merging final buckets.
  0:00:28.089    87M / 9278M INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 100)   Building k-mer extensions from k+1-mers
  0:00:30.574    87M / 9278M INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 105)   Building k-mer extensions from k+1-mers finished.
  0:00:30.659    87M / 9278M INFO    General                 (stage.cpp                 : 117)   PROCEDURE == Condensing graph (id: construction:graph_condensing)
  0:00:30.707    87M / 9278M INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 354)   Extracting unbranching paths
  0:00:33.784   165M / 9278M INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 373)   Extracting unbranching paths finished. 1523555 sequences extracted
  0:00:35.025   165M / 9278M INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 309)   Collecting perfect loops
  0:00:35.487   165M / 9278M INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 342)   Collecting perfect loops finished. 3 loops collected
  0:00:35.643   165M / 9278M INFO    General                 (debruijn_graph_constructor: 487)   Total 3047116 edges to create
  0:00:35.643   286M / 9278M INFO    General                 (debruijn_graph_constructor: 489)   Collecting link records
  0:00:38.098   334M / 9278M INFO    General                 (debruijn_graph_constructor: 491)   Ordering link records
  0:00:38.138   334M / 9278M INFO    General                 (debruijn_graph_constructor: 493)   Sorting done
  0:00:38.172   350M / 9278M INFO    General                 (debruijn_graph_constructor: 503)   Total 1707840 vertices to create
  0:00:38.172   510M / 9278M INFO    General                 (debruijn_graph_constructor: 506)   Connecting the graph
  0:00:41.315   422M / 9278M INFO    General                 (stage.cpp                 : 117)   PROCEDURE == Filling coverage indices (PHM) (id: construction:coverage_filling_phm)
  0:00:41.315   422M / 9278M INFO   K-mer Index Building     (kmer_index_builder.hpp    : 395)   Building perfect hash indices
  0:00:42.042   460M / 9278M INFO   K-mer Index Building     (kmer_index_builder.hpp    : 431)   Index built. Total 49132043 kmers, 35606152 bytes occupied (5.79763 bits per kmer).
  0:00:42.165   648M / 9278M INFO    General                 (coverage_hash_map_builder.:  47)   Collecting k-mer coverage information from reads, this takes a while.
  0:01:00.934   648M / 9278M INFO    General                 (construction.cpp          : 430)   Filling coverage and flanking coverage from PHM
  0:01:03.583   648M / 9278M INFO    General                 (coverage_filling.hpp      :  82)   Processed 3047092 edges
  0:01:04.525   337M / 9278M INFO   StageManager             (stage.cpp                 : 185)   STAGE == EC Threshold Finding (id: ec_threshold_finder)
  0:01:04.527   337M / 9278M INFO    General                 (kmer_coverage_model.cpp   : 181)   Kmer coverage valley at: 42
  0:01:04.527   337M / 9278M INFO    General                 (kmer_coverage_model.cpp   : 201)   K-mer histogram maximum: 187
  0:01:04.527   337M / 9278M INFO    General                 (kmer_coverage_model.cpp   : 237)   Estimated median coverage: 192. Coverage mad: 48.9258
  0:01:04.527   337M / 9278M INFO    General                 (kmer_coverage_model.cpp   : 259)   Fitting coverage model
  0:01:04.775   337M / 9278M INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 2
  0:01:05.418   337M / 9278M INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 4
  0:01:07.627   337M / 9278M INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 8
  0:01:10.231   337M / 9278M INFO    General                 (kmer_coverage_model.cpp   : 309)   Fitted mean coverage: 193.233. Fitted coverage std. dev: 47.4082
  0:01:10.240   337M / 9278M INFO    General                 (kmer_coverage_model.cpp   : 334)   Probability of erroneous kmer at valley: 0.491758
  0:01:10.240   337M / 9278M INFO    General                 (kmer_coverage_model.cpp   : 358)   Preliminary threshold calculated as: 66
  0:01:10.240   337M / 9278M INFO    General                 (kmer_coverage_model.cpp   : 362)   Threshold adjusted to: 66
  0:01:10.240   337M / 9278M INFO    General                 (kmer_coverage_model.cpp   : 375)   Estimated genome size (ignoring repeats): 4205822
  0:01:10.240   337M / 9278M INFO    General                 (genomic_info_filler.cpp   :  55)   Mean coverage was calculated as 193.233
  0:01:10.240   337M / 9278M INFO    General                 (genomic_info_filler.cpp   :  70)   EC coverage threshold value was calculated as 66
  0:01:10.240   337M / 9278M INFO    General                 (genomic_info_filler.cpp   :  71)   Trusted kmer low bound: 0
  0:01:10.240   337M / 9278M INFO   StageManager             (stage.cpp                 : 185)   STAGE == Gap Closer (id: early_gapcloser)
  0:01:10.247   346M / 9278M INFO    General                 (edge_index.hpp            : 113)   Size of edge index entries: 12/8
  0:01:10.555   382M / 9278M INFO    General                 (gap_closer.cpp            : 101)   Total edges in tip neighborhood: 1179900 out of 3047092, length: 62988233
  0:01:10.687   396M / 9278M INFO    General                 (edge_index.hpp            : 167)   Using small index (max_id = 3062354)
  0:01:10.932   396M / 9278M INFO   K-mer Index Building     (kmer_index_builder.hpp    : 395)   Building perfect hash indices
  0:01:13.094   425M / 9278M INFO   K-mer Index Building     (kmer_index_builder.hpp    : 431)   Index built. Total 41607467 kmers, 30052312 bytes occupied (5.77825 bits per kmer).
  0:01:13.286   745M / 9278M INFO    General                 (edge_index_builders.hpp   : 265)   Collecting edge information from graph, this takes a while.
  0:01:24.610   745M / 9278M INFO    General                 (sequence_mapper_notifier.h:  77)   Processed 200000 reads
  0:01:24.674   745M / 9278M INFO    General                 (sequence_mapper_notifier.h:  77)   Processed 400000 reads
  0:01:24.683   731M / 9278M INFO    General                 (sequence_mapper_notifier.h:  77)   Processed 600000 reads
  0:01:24.744   731M / 9278M INFO    General                 (sequence_mapper_notifier.h:  77)   Processed 800000 reads
  0:01:24.767   732M / 9278M INFO    General                 (sequence_mapper_notifier.h:  77)   Processed 1000000 reads
  0:01:24.778   732M / 9278M INFO    General                 (sequence_mapper_notifier.h:  77)   Processed 1200000 reads
  0:01:25.461   732M / 9278M INFO    General                 (sequence_mapper_notifier.h:  77)   Processed 2200000 reads
  0:01:35.259   732M / 9278M INFO    General                 (sequence_mapper_notifier.h:  77)   Processed 4200000 reads
  0:01:41.554   734M / 9278M INFO    General                 (sequence_mapper_notifier.h:  95)   Total 7775783 reads processed
  0:01:41.663   352M / 9278M INFO    General                 (gap_closer.cpp            : 452)   Initializing gap closer
  0:01:41.665   352M / 9278M INFO   GapCloser                (gap_closer.cpp            : 359)   Closing short gaps
  0:01:43.897   352M / 9278M INFO   GapCloser                (gap_closer.cpp            : 391)   Closing short gaps complete: filled 51 gaps after checking 3304 candidates
  0:01:43.949   352M / 9278M INFO    General                 (gap_closer.cpp            : 456)   Gap closer done
  0:01:43.968   337M / 9278M INFO   StageManager             (stage.cpp                 : 185)   STAGE == Raw Simplification (id: raw_simplification)
  0:01:43.968   337M / 9278M INFO    General                 (simplification.cpp        : 127)   PROCEDURE == Initial cleaning
  0:01:43.968   337M / 9278M INFO    General                 (graph_simplification.hpp  : 662)   Flanking coverage based disconnection disabled
  0:01:43.968   337M / 9278M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Self conjugate edge remover
  0:01:44.039   337M / 9278M INFO   Simplification           (parallel_processing.hpp   : 170)   Self conjugate edge remover triggered 0 times
  0:01:44.039   337M / 9278M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Initial tip clipper
  0:01:47.578   309M / 9278M INFO   Simplification           (parallel_processing.hpp   : 170)   Initial tip clipper triggered 534865 times
  0:01:47.584   309M / 9278M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Initial ec remover
  0:01:48.292   308M / 9278M INFO   Simplification           (parallel_processing.hpp   : 170)   Initial ec remover triggered 57817 times
  0:01:48.294   308M / 9278M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Initial isolated edge remover
  0:01:48.756   298M / 9278M INFO   Simplification           (parallel_processing.hpp   : 170)   Initial isolated edge remover triggered 255471 times
  0:01:48.759   287M / 9278M INFO   StageManager             (stage.cpp                 : 185)   STAGE == Simplification (id: simplification)
  0:01:48.760   287M / 9278M INFO    General                 (simplification.cpp        : 368)   Graph simplification started
  0:01:48.760   287M / 9278M INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance
  0:01:48.760   287M / 9278M INFO    General                 (simplification.cpp        : 373)   PROCEDURE == Simplification cycle, iteration 1
  0:01:48.760   287M / 9278M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Tip clipper
  0:01:48.875   286M / 9278M INFO   Simplification           (parallel_processing.hpp   : 170)   Tip clipper triggered 19711 times
  0:01:48.877   286M / 9278M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Bulge remover
  0:01:49.921   327M / 9278M INFO   Simplification           (parallel_processing.hpp   : 170)   Bulge remover triggered 7640 times
  0:01:49.922   327M / 9278M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Low coverage edge remover
  0:01:50.023   328M / 9278M INFO   Simplification           (parallel_processing.hpp   : 170)   Low coverage edge remover triggered 6858 times
  0:01:50.024   328M / 9278M INFO    General                 (simplification.cpp        : 373)   PROCEDURE == Simplification cycle, iteration 2
  0:01:50.024   328M / 9278M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Tip clipper
  0:01:50.060   327M / 9278M INFO   Simplification           (parallel_processing.hpp   : 170)   Tip clipper triggered 2929 times
  0:01:50.060   327M / 9278M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Bulge remover
  0:01:50.268   331M / 9278M INFO   Simplification           (parallel_processing.hpp   : 170)   Bulge remover triggered 848 times
  0:01:50.271   331M / 9278M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Low coverage edge remover
  0:01:50.283   331M / 9278M INFO   Simplification           (parallel_processing.hpp   : 170)   Low coverage edge remover triggered 457 times
  0:01:50.283   331M / 9278M INFO    General                 (simplification.cpp        : 373)   PROCEDURE == Simplification cycle, iteration 3
  0:01:50.283   331M / 9278M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Tip clipper
  0:01:50.296   331M / 9278M INFO   Simplification           (parallel_processing.hpp   : 170)   Tip clipper triggered 287 times
  0:01:50.296   331M / 9278M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Bulge remover
  0:01:50.314   332M / 9278M INFO   Simplification           (parallel_processing.hpp   : 170)   Bulge remover triggered 65 times
  0:01:50.314   332M / 9278M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Low coverage edge remover
  0:01:50.317   332M / 9278M INFO   Simplification           (parallel_processing.hpp   : 170)   Low coverage edge remover triggered 81 times
  0:01:50.317   332M / 9278M INFO    General                 (simplification.cpp        : 373)   PROCEDURE == Simplification cycle, iteration 4
  0:01:50.317   332M / 9278M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Tip clipper
  0:01:50.317   332M / 9278M INFO   Simplification           (parallel_processing.hpp   : 170)   Tip clipper triggered 69 times
  0:01:50.317   332M / 9278M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Bulge remover
  0:01:50.318   332M / 9278M INFO   Simplification           (parallel_processing.hpp   : 170)   Bulge remover triggered 0 times
  0:01:50.318   332M / 9278M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Low coverage edge remover
  0:01:50.319   332M / 9278M INFO   Simplification           (parallel_processing.hpp   : 170)   Low coverage edge remover triggered 25 times
  0:01:50.319   332M / 9278M INFO    General                 (simplification.cpp        : 373)   PROCEDURE == Simplification cycle, iteration 5
  0:01:50.319   332M / 9278M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Tip clipper
  0:01:50.319   332M / 9278M INFO   Simplification           (parallel_processing.hpp   : 170)   Tip clipper triggered 26 times
  0:01:50.319   332M / 9278M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Bulge remover
  0:01:50.319   332M / 9278M INFO   Simplification           (parallel_processing.hpp   : 170)   Bulge remover triggered 1 times
  0:01:50.319   332M / 9278M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Low coverage edge remover
  0:01:50.320   332M / 9278M INFO   Simplification           (parallel_processing.hpp   : 170)   Low coverage edge remover triggered 13 times
  0:01:50.320   332M / 9278M INFO    General                 (simplification.cpp        : 373)   PROCEDURE == Simplification cycle, iteration 6
  0:01:50.320   332M / 9278M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Tip clipper
  0:01:50.320   332M / 9278M INFO   Simplification           (parallel_processing.hpp   : 170)   Tip clipper triggered 11 times
  0:01:50.320   332M / 9278M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Bulge remover
  0:01:50.320   332M / 9278M INFO   Simplification           (parallel_processing.hpp   : 170)   Bulge remover triggered 0 times
  0:01:50.320   332M / 9278M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Low coverage edge remover
  0:01:50.320   332M / 9278M INFO   Simplification           (parallel_processing.hpp   : 170)   Low coverage edge remover triggered 3 times
  0:01:50.320   332M / 9278M INFO    General                 (simplification.cpp        : 373)   PROCEDURE == Simplification cycle, iteration 7
  0:01:50.320   332M / 9278M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Tip clipper
  0:01:50.320   332M / 9278M INFO   Simplification           (parallel_processing.hpp   : 170)   Tip clipper triggered 4 times
  0:01:50.320   332M / 9278M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Bulge remover
  0:01:50.320   332M / 9278M INFO   Simplification           (parallel_processing.hpp   : 170)   Bulge remover triggered 0 times
  0:01:50.320   332M / 9278M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Low coverage edge remover
  0:01:50.322   332M / 9278M INFO   Simplification           (parallel_processing.hpp   : 170)   Low coverage edge remover triggered 9 times
  0:01:50.322   332M / 9278M INFO    General                 (simplification.cpp        : 373)   PROCEDURE == Simplification cycle, iteration 8
  0:01:50.322   332M / 9278M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Tip clipper
  0:01:50.323   332M / 9278M INFO   Simplification           (parallel_processing.hpp   : 170)   Tip clipper triggered 8 times
  0:01:50.323   332M / 9278M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Bulge remover
  0:01:50.324   332M / 9278M INFO   Simplification           (parallel_processing.hpp   : 170)   Bulge remover triggered 0 times
  0:01:50.324   332M / 9278M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Low coverage edge remover
  0:01:50.325   332M / 9278M INFO   Simplification           (parallel_processing.hpp   : 170)   Low coverage edge remover triggered 7 times
  0:01:50.325   332M / 9278M INFO    General                 (simplification.cpp        : 373)   PROCEDURE == Simplification cycle, iteration 9
  0:01:50.325   332M / 9278M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Tip clipper
  0:01:50.325   332M / 9278M INFO   Simplification           (parallel_processing.hpp   : 170)   Tip clipper triggered 5 times
  0:01:50.325   332M / 9278M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Bulge remover
  0:01:50.325   332M / 9278M INFO   Simplification           (parallel_processing.hpp   : 170)   Bulge remover triggered 0 times
  0:01:50.325   332M / 9278M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Low coverage edge remover
  0:01:50.326   332M / 9278M INFO   Simplification           (parallel_processing.hpp   : 170)   Low coverage edge remover triggered 3 times
  0:01:50.326   332M / 9278M INFO    General                 (simplification.cpp        : 373)   PROCEDURE == Simplification cycle, iteration 10
  0:01:50.326   332M / 9278M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Tip clipper
  0:01:50.326   332M / 9278M INFO   Simplification           (parallel_processing.hpp   : 170)   Tip clipper triggered 2 times
  0:01:50.326   332M / 9278M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Bulge remover
  0:01:50.326   332M / 9278M INFO   Simplification           (parallel_processing.hpp   : 170)   Bulge remover triggered 0 times
  0:01:50.326   332M / 9278M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Low coverage edge remover
  0:01:50.327   332M / 9278M INFO   Simplification           (parallel_processing.hpp   : 170)   Low coverage edge remover triggered 1 times
  0:01:50.327   332M / 9278M INFO    General                 (simplification.cpp        : 373)   PROCEDURE == Simplification cycle, iteration 11
  0:01:50.327   332M / 9278M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Tip clipper
  0:01:50.334   332M / 9278M INFO   Simplification           (parallel_processing.hpp   : 170)   Tip clipper triggered 11 times
  0:01:50.334   332M / 9278M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Bulge remover
  0:01:50.340   332M / 9278M INFO   Simplification           (parallel_processing.hpp   : 170)   Bulge remover triggered 2 times
  0:01:50.340   332M / 9278M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Low coverage edge remover
  0:01:50.344   331M / 9278M INFO   Simplification           (parallel_processing.hpp   : 170)   Low coverage edge remover triggered 0 times
  0:01:50.344   331M / 9278M INFO    General                 (simplification.cpp        : 373)   PROCEDURE == Simplification cycle, iteration 12
  0:01:50.344   331M / 9278M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Tip clipper
  0:01:50.344   331M / 9278M INFO   Simplification           (parallel_processing.hpp   : 170)   Tip clipper triggered 0 times
  0:01:50.344   331M / 9278M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Bulge remover
  0:01:50.345   331M / 9278M INFO   Simplification           (parallel_processing.hpp   : 170)   Bulge remover triggered 0 times
  0:01:50.345   331M / 9278M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Low coverage edge remover
  0:01:50.345   331M / 9278M INFO   Simplification           (parallel_processing.hpp   : 170)   Low coverage edge remover triggered 0 times
  0:01:50.349   331M / 9278M INFO   StageManager             (stage.cpp                 : 185)   STAGE == Gap Closer (id: late_gapcloser)
  0:01:50.355   340M / 9278M INFO    General                 (edge_index.hpp            : 113)   Size of edge index entries: 12/8
  0:01:50.361   340M / 9278M INFO    General                 (gap_closer.cpp            : 101)   Total edges in tip neighborhood: 5753 out of 7422, length: 881578
  0:01:50.361   340M / 9278M INFO    General                 (edge_index.hpp            : 167)   Using small index (max_id = 3062354)
  0:01:50.363   340M / 9278M INFO   K-mer Index Building     (kmer_index_builder.hpp    : 395)   Building perfect hash indices
  0:01:50.381   341M / 9278M INFO   K-mer Index Building     (kmer_index_builder.hpp    : 431)   Index built. Total 440932 kmers, 319208 bytes occupied (5.79151 bits per kmer).
  0:01:50.382   344M / 9278M INFO    General                 (edge_index_builders.hpp   : 265)   Collecting edge information from graph, this takes a while.
  0:01:58.896   344M / 9278M INFO    General                 (sequence_mapper_notifier.h:  77)   Processed 200000 reads
  0:01:58.970   344M / 9278M INFO    General                 (sequence_mapper_notifier.h:  77)   Processed 400000 reads
  0:01:58.978   344M / 9278M INFO    General                 (sequence_mapper_notifier.h:  77)   Processed 600000 reads
  0:01:59.021   344M / 9278M INFO    General                 (sequence_mapper_notifier.h:  77)   Processed 800000 reads
  0:01:59.033   344M / 9278M INFO    General                 (sequence_mapper_notifier.h:  77)   Processed 1000000 reads
  0:01:59.059   344M / 9278M INFO    General                 (sequence_mapper_notifier.h:  77)   Processed 1200000 reads
  0:01:59.889   344M / 9278M INFO    General                 (sequence_mapper_notifier.h:  77)   Processed 2200000 reads
  0:02:07.913   344M / 9278M INFO    General                 (sequence_mapper_notifier.h:  77)   Processed 4200000 reads
  0:02:13.578   344M / 9278M INFO    General                 (sequence_mapper_notifier.h:  95)   Total 7775783 reads processed
  0:02:13.594   341M / 9278M INFO    General                 (gap_closer.cpp            : 452)   Initializing gap closer
  0:02:13.595   341M / 9278M INFO   GapCloser                (gap_closer.cpp            : 359)   Closing short gaps
  0:02:13.608   341M / 9278M INFO   GapCloser                (gap_closer.cpp            : 391)   Closing short gaps complete: filled 0 gaps after checking 14 candidates
  0:02:13.615   341M / 9278M INFO    General                 (gap_closer.cpp            : 456)   Gap closer done
  0:02:13.617   331M / 9278M INFO   StageManager             (stage.cpp                 : 185)   STAGE == Simplification Cleanup (id: simplification_cleanup)
  0:02:13.617   331M / 9278M INFO    General                 (simplification.cpp        : 176)   PROCEDURE == Post simplification
  0:02:13.617   331M / 9278M INFO    General                 (graph_simplification.hpp  : 448)   Disconnection of relatively low covered edges disabled
  0:02:13.617   331M / 9278M INFO    General                 (graph_simplification.hpp  : 485)   Complex tip clipping disabled
  0:02:13.617   331M / 9278M INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance
  0:02:13.617   331M / 9278M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Tip clipper
  0:02:13.622   331M / 9278M INFO   Simplification           (parallel_processing.hpp   : 170)   Tip clipper triggered 0 times
  0:02:13.622   331M / 9278M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Bulge remover
  0:02:13.628   331M / 9278M INFO   Simplification           (parallel_processing.hpp   : 170)   Bulge remover triggered 0 times
  0:02:13.628   331M / 9278M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Tip clipper
  0:02:13.632   331M / 9278M INFO   Simplification           (parallel_processing.hpp   : 170)   Tip clipper triggered 0 times
  0:02:13.632   331M / 9278M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Bulge remover
  0:02:13.638   331M / 9278M INFO   Simplification           (parallel_processing.hpp   : 170)   Bulge remover triggered 0 times
  0:02:13.638   331M / 9278M INFO    General                 (simplification.cpp        : 327)   Disrupting self-conjugate edges
  0:02:13.643   331M / 9278M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Removing isolated edges
  0:02:13.653   331M / 9278M INFO   Simplification           (parallel_processing.hpp   : 170)   Removing isolated edges triggered 1443 times
  0:02:13.657   331M / 9278M INFO    General                 (simplification.cpp        : 495)   After simplification:
  0:02:13.658   331M / 9278M INFO    General                 (simplification.cpp        : 496)     Average coverage = 187.084
  0:02:13.662   331M / 9278M INFO    General                 (simplification.cpp        : 497)     Total length = 4471519
  0:02:13.666   331M / 9278M INFO    General                 (simplification.cpp        : 498)     Median edge length: 85569
  0:02:13.666   331M / 9278M INFO    General                 (simplification.cpp        : 499)     Edges: 4537
  0:02:13.666   331M / 9278M INFO    General                 (simplification.cpp        : 500)     Vertices: 6840
  0:02:13.666   331M / 9278M INFO   StageManager             (stage.cpp                 : 185)   STAGE == Contig Output (id: contig_output)
  0:02:13.683   331M / 9278M INFO    General                 (read_converter.cpp        : 107)   Outputting contigs to /bios-store5/lyt/test_sample/sample3/spades_result_unique_new/K55/simplified_contigs
  0:02:13.748   334M / 9278M INFO    General                 (binary_converter.cpp      : 111)   2270 reads written
  0:02:13.760   331M / 9278M INFO    General                 (pipeline.cpp              : 287)   SPAdes finished
  0:02:13.924     1M / 9278M INFO    General                 (main.cpp                  : 136)   Assembling time: 0 hours 2 minutes 13 seconds

===== K55 finished. 


===== K77 started. 


== Running: /bios-store5/lyt/python_demo_try/SeriesAnalysis/SPAdes-3.15.5-Linux/bin/spades-core /bios-store5/lyt/test_sample/sample3/spades_result_unique_new/K77/configs/config.info

  0:00:00.000     1M / 11M   INFO    General                 (main.cpp                  :  99)   Loaded config from /bios-store5/lyt/test_sample/sample3/spades_result_unique_new/K77/configs/config.info
  0:00:00.000     1M / 11M   INFO    General                 (memory_limit.cpp          :  54)   Memory limit set to 125 Gb
  0:00:00.001     1M / 11M   INFO    General                 (main.cpp                  : 107)   Starting SPAdes, built from refs/heads/spades_3.15.5, git revision e757b8216f9a038fb616e9551a2d4891b2d19ad7
  0:00:00.001     1M / 11M   INFO    General                 (main.cpp                  : 108)   Maximum k-mer length: 128
  0:00:00.001     1M / 11M   INFO    General                 (main.cpp                  : 109)   Assembling dataset (/bios-store5/lyt/test_sample/sample3/spades_result_unique_new/dataset.info) with K=77
  0:00:00.001     1M / 11M   INFO    General                 (main.cpp                  : 110)   Maximum # of threads to use (adjusted due to OMP capabilities): 16
  0:00:00.001     1M / 11M   INFO    General                 (pipeline.cpp              : 212)   SPAdes started
  0:00:00.001     1M / 11M   INFO    General                 (pipeline.cpp              : 225)   Starting from stage: read_conversion
  0:00:00.001     1M / 11M   INFO    General                 (pipeline.cpp              : 231)   Two-step repeat resolution disabled
  0:00:00.001     1M / 11M   INFO   GraphCore                (graph_core.hpp            : 672)   Graph created, vertex min_id: 3, edge min_id: 3
  0:00:00.001     1M / 11M   INFO   GraphCore                (graph_core.hpp            : 673)   Vertex size: 48, edge size: 40
  0:00:00.001     1M / 11M   INFO    General                 (edge_index.hpp            : 113)   Size of edge index entries: 12/8
  0:00:00.001     1M / 11M   INFO    General                 (pipeline.cpp              : 242)   Will need read mapping, kmer mapper will be attached
  0:00:00.002     1M / 11M   INFO   StageManager             (stage.cpp                 : 185)   STAGE == Binary Read Conversion (id: read_conversion)
  0:00:00.003     1M / 11M   INFO    General                 (read_converter.cpp        :  53)   Binary reads detected
  0:00:00.005     1M / 11M   INFO   StageManager             (stage.cpp                 : 185)   STAGE == de Bruijn graph construction (id: construction)
  0:00:00.005     1M / 11M   INFO    General                 (construction.cpp          : 118)   Contigs from previous K will be used: /bios-store5/lyt/test_sample/sample3/spades_result_unique_new/K55/simplified_contigs
  0:00:00.073     1M / 11M   INFO    General                 (construction.cpp          : 153)   Max read length 150
  0:00:00.073     1M / 11M   INFO    General                 (construction.cpp          : 159)   Average read length 111.138
  0:00:00.073     1M / 11M   INFO    General                 (stage.cpp                 : 117)   PROCEDURE == k+1-mer counting (id: construction:kpomer_counting)
  0:00:00.073     1M / 11M   INFO    General                 (kmer_index_builder.hpp    : 243)   Splitting kmer instances into 160 files using 16 threads. This might take a while.
  0:00:00.075     1M / 11M   INFO    General                 (file_limit.hpp            :  42)   Open file limit set to 1024
  0:00:00.075     1M / 11M   INFO    General                 (kmer_splitter.hpp         :  93)   Memory available for splitting buffers: 2.60415 Gb
  0:00:00.075     1M / 11M   INFO    General                 (kmer_splitter.hpp         : 101)   Using cell size of 139810
  0:00:08.423  9601M / 9601M INFO    General                 (kmer_splitters.hpp        : 125)   Processed 18276794 reads
  0:00:13.777  9601M / 9601M INFO    General                 (kmer_splitters.hpp        : 125)   Processed 31310242 reads
  0:00:13.858     2M / 9212M INFO    General                 (kmer_splitters.hpp        : 131)   Used 31310242 reads
  0:00:15.112     2M / 9212M INFO    General                 (kmer_index_builder.hpp    : 249)   Starting k-mer counting.
  0:00:18.219     1M / 9212M INFO    General                 (kmer_index_builder.hpp    : 260)   K-mer counting done. There are 41765528 kmers in total.
  0:00:18.219     1M / 9212M INFO    General                 (stage.cpp                 : 117)   PROCEDURE == Extension index construction (id: construction:extension_index_construction)
  0:00:18.454     1M / 9212M INFO   K-mer Index Building     (kmer_index_builder.hpp    : 438)   Building kmer index
  0:00:18.455     1M / 9212M INFO    General                 (kmer_index_builder.hpp    : 243)   Splitting kmer instances into 160 files using 16 threads. This might take a while.
  0:00:18.456     1M / 9212M INFO    General                 (file_limit.hpp            :  42)   Open file limit set to 1024
  0:00:18.456     1M / 9212M INFO    General                 (kmer_splitter.hpp         :  93)   Memory available for splitting buffers: 2.60415 Gb
  0:00:18.456     1M / 9212M INFO    General                 (kmer_splitter.hpp         : 101)   Using cell size of 139810
  0:00:22.859  9602M / 9602M INFO    General                 (kmer_splitters.hpp        : 194)   Processed 41765528 kmers
  0:00:22.859  9602M / 9602M INFO    General                 (kmer_splitters.hpp        : 199)   Used 41765528 kmers.
  0:00:22.862     2M / 9212M INFO    General                 (kmer_index_builder.hpp    : 249)   Starting k-mer counting.
  0:00:25.803     2M / 9212M INFO    General                 (kmer_index_builder.hpp    : 260)   K-mer counting done. There are 42183982 kmers in total.
  0:00:25.803     2M / 9212M INFO   K-mer Index Building     (kmer_index_builder.hpp    : 395)   Building perfect hash indices
  0:00:27.141    37M / 9212M INFO   K-mer Index Building     (kmer_index_builder.hpp    : 431)   Index built. Total 42183982 kmers, 30587552 bytes occupied (5.80079 bits per kmer).
  0:00:27.141    37M / 9212M INFO    General                 (kmer_index_builder.hpp    : 169)   Merging final buckets.
  0:00:29.885    81M / 9212M INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 100)   Building k-mer extensions from k+1-mers
  0:00:31.944    81M / 9212M INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 105)   Building k-mer extensions from k+1-mers finished.
  0:00:32.051    81M / 9212M INFO    General                 (stage.cpp                 : 117)   PROCEDURE == Condensing graph (id: construction:graph_condensing)
  0:00:32.106    81M / 9212M INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 354)   Extracting unbranching paths
  0:00:34.703   141M / 9212M INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 373)   Extracting unbranching paths finished. 1069071 sequences extracted
  0:00:35.846   141M / 9212M INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 309)   Collecting perfect loops
  0:00:36.252   141M / 9212M INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 342)   Collecting perfect loops finished. 4 loops collected
  0:00:36.407   141M / 9212M INFO    General                 (debruijn_graph_constructor: 487)   Total 2138150 edges to create
  0:00:36.407   226M / 9212M INFO    General                 (debruijn_graph_constructor: 489)   Collecting link records
  0:00:38.148   262M / 9212M INFO    General                 (debruijn_graph_constructor: 491)   Ordering link records
  0:00:38.175   262M / 9212M INFO    General                 (debruijn_graph_constructor: 493)   Sorting done
  0:00:38.196   278M / 9212M INFO    General                 (debruijn_graph_constructor: 503)   Total 1487529 vertices to create
  0:00:38.196   418M / 9212M INFO    General                 (debruijn_graph_constructor: 506)   Connecting the graph
  0:00:41.017   350M / 9212M INFO    General                 (stage.cpp                 : 117)   PROCEDURE == Filling coverage indices (PHM) (id: construction:coverage_filling_phm)
  0:00:41.018   350M / 9212M INFO   K-mer Index Building     (kmer_index_builder.hpp    : 395)   Building perfect hash indices
  0:00:41.770   380M / 9212M INFO   K-mer Index Building     (kmer_index_builder.hpp    : 431)   Index built. Total 41765528 kmers, 30285696 bytes occupied (5.80109 bits per kmer).
  0:00:41.871   540M / 9212M INFO    General                 (coverage_hash_map_builder.:  47)   Collecting k-mer coverage information from reads, this takes a while.
  0:00:55.331   540M / 9212M INFO    General                 (construction.cpp          : 430)   Filling coverage and flanking coverage from PHM
  0:00:57.486   540M / 9212M INFO    General                 (coverage_filling.hpp      :  82)   Processed 2138137 edges
  0:00:58.588   269M / 9212M INFO   StageManager             (stage.cpp                 : 185)   STAGE == EC Threshold Finding (id: ec_threshold_finder)
  0:00:58.589   269M / 9212M INFO    General                 (kmer_coverage_model.cpp   : 181)   Kmer coverage valley at: 22
  0:00:58.589   269M / 9212M INFO    General                 (kmer_coverage_model.cpp   : 201)   K-mer histogram maximum: 123
  0:00:58.589   269M / 9212M INFO    General                 (kmer_coverage_model.cpp   : 237)   Estimated median coverage: 127. Coverage mad: 38.5476
  0:00:58.589   269M / 9212M INFO    General                 (kmer_coverage_model.cpp   : 259)   Fitting coverage model
  0:00:58.750   269M / 9212M INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 2
  0:00:59.182   269M / 9212M INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 4
  0:01:00.667   269M / 9212M INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 8
  0:01:01.482   269M / 9212M INFO    General                 (kmer_coverage_model.cpp   : 309)   Fitted mean coverage: 129.265. Fitted coverage std. dev: 36.5042
  0:01:01.487   269M / 9212M INFO    General                 (kmer_coverage_model.cpp   : 334)   Probability of erroneous kmer at valley: 0.651949
  0:01:01.487   269M / 9212M INFO    General                 (kmer_coverage_model.cpp   : 358)   Preliminary threshold calculated as: 41
  0:01:01.487   269M / 9212M INFO    General                 (kmer_coverage_model.cpp   : 362)   Threshold adjusted to: 41
  0:01:01.487   269M / 9212M INFO    General                 (kmer_coverage_model.cpp   : 375)   Estimated genome size (ignoring repeats): 4211346
  0:01:01.487   269M / 9212M INFO    General                 (genomic_info_filler.cpp   :  55)   Mean coverage was calculated as 129.265
  0:01:01.487   269M / 9212M INFO    General                 (genomic_info_filler.cpp   :  70)   EC coverage threshold value was calculated as 41
  0:01:01.487   269M / 9212M INFO    General                 (genomic_info_filler.cpp   :  71)   Trusted kmer low bound: 0
  0:01:01.487   269M / 9212M INFO   StageManager             (stage.cpp                 : 185)   STAGE == Gap Closer (id: early_gapcloser)
  0:01:01.494   278M / 9212M INFO    General                 (edge_index.hpp            : 113)   Size of edge index entries: 12/8
  0:01:01.808   314M / 9212M INFO    General                 (gap_closer.cpp            : 101)   Total edges in tip neighborhood: 1239271 out of 2138137, length: 63952622
  0:01:01.942   326M / 9212M INFO    General                 (edge_index.hpp            : 167)   Using small index (max_id = 2148843)
  0:01:02.172   326M / 9212M INFO   K-mer Index Building     (kmer_index_builder.hpp    : 395)   Building perfect hash indices
  0:01:04.207   352M / 9212M INFO   K-mer Index Building     (kmer_index_builder.hpp    : 431)   Index built. Total 36408420 kmers, 26297224 bytes occupied (5.77827 bits per kmer).
  0:01:04.368   633M / 9212M INFO    General                 (edge_index_builders.hpp   : 265)   Collecting edge information from graph, this takes a while.
  0:01:12.634   633M / 9212M INFO    General                 (sequence_mapper_notifier.h:  77)   Processed 200000 reads
  0:01:12.646   633M / 9212M INFO    General                 (sequence_mapper_notifier.h:  77)   Processed 400000 reads
  0:01:12.672   633M / 9212M INFO    General                 (sequence_mapper_notifier.h:  77)   Processed 600000 reads
  0:01:12.697   633M / 9212M INFO    General                 (sequence_mapper_notifier.h:  77)   Processed 800000 reads
  0:01:12.707   633M / 9212M INFO    General                 (sequence_mapper_notifier.h:  77)   Processed 1000000 reads
  0:01:12.747   621M / 9212M INFO    General                 (sequence_mapper_notifier.h:  77)   Processed 1200000 reads
  0:01:13.225   621M / 9212M INFO    General                 (sequence_mapper_notifier.h:  77)   Processed 2200000 reads
  0:01:20.095   621M / 9212M INFO    General                 (sequence_mapper_notifier.h:  77)   Processed 4200000 reads
  0:01:24.382   624M / 9212M INFO    General                 (sequence_mapper_notifier.h:  95)   Total 7775783 reads processed
  0:01:24.482   285M / 9212M INFO    General                 (gap_closer.cpp            : 452)   Initializing gap closer
  0:01:24.482   285M / 9212M INFO   GapCloser                (gap_closer.cpp            : 359)   Closing short gaps
  0:01:26.009   285M / 9212M INFO   GapCloser                (gap_closer.cpp            : 391)   Closing short gaps complete: filled 37 gaps after checking 4063 candidates
  0:01:26.058   285M / 9212M INFO    General                 (gap_closer.cpp            : 456)   Gap closer done
  0:01:26.070   269M / 9212M INFO   StageManager             (stage.cpp                 : 185)   STAGE == Raw Simplification (id: raw_simplification)
  0:01:26.070   269M / 9212M INFO    General                 (simplification.cpp        : 127)   PROCEDURE == Initial cleaning
  0:01:26.071   269M / 9212M INFO    General                 (graph_simplification.hpp  : 662)   Flanking coverage based disconnection disabled
  0:01:26.071   269M / 9212M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Self conjugate edge remover
  0:01:26.130   269M / 9212M INFO   Simplification           (parallel_processing.hpp   : 170)   Self conjugate edge remover triggered 0 times
  0:01:26.130   269M / 9212M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Initial tip clipper
  0:01:28.354   251M / 9212M INFO   Simplification           (parallel_processing.hpp   : 170)   Initial tip clipper triggered 308767 times
  0:01:28.359   251M / 9212M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Initial ec remover
  0:01:28.521   250M / 9212M INFO   Simplification           (parallel_processing.hpp   : 170)   Initial ec remover triggered 7160 times
  0:01:28.522   250M / 9212M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Initial isolated edge remover
  0:01:29.249   234M / 9212M INFO   Simplification           (parallel_processing.hpp   : 170)   Initial isolated edge remover triggered 428792 times
  0:01:29.253   228M / 9212M INFO   StageManager             (stage.cpp                 : 185)   STAGE == Simplification (id: simplification)
  0:01:29.253   228M / 9212M INFO    General                 (simplification.cpp        : 368)   Graph simplification started
  0:01:29.253   228M / 9212M INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance
  0:01:29.253   228M / 9212M INFO    General                 (simplification.cpp        : 373)   PROCEDURE == Simplification cycle, iteration 1
  0:01:29.253   228M / 9212M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Tip clipper
  0:01:29.276   228M / 9212M INFO   Simplification           (parallel_processing.hpp   : 170)   Tip clipper triggered 2400 times
  0:01:29.276   228M / 9212M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Bulge remover
  0:01:29.905   261M / 9212M INFO   Simplification           (parallel_processing.hpp   : 170)   Bulge remover triggered 2917 times
  0:01:29.906   261M / 9212M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Low coverage edge remover
  0:01:29.930   261M / 9212M INFO   Simplification           (parallel_processing.hpp   : 170)   Low coverage edge remover triggered 648 times
  0:01:29.930   261M / 9212M INFO    General                 (simplification.cpp        : 373)   PROCEDURE == Simplification cycle, iteration 2
  0:01:29.930   261M / 9212M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Tip clipper
  0:01:29.951   261M / 9212M INFO   Simplification           (parallel_processing.hpp   : 170)   Tip clipper triggered 397 times
  0:01:29.951   261M / 9212M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Bulge remover
  0:01:30.056   265M / 9212M INFO   Simplification           (parallel_processing.hpp   : 170)   Bulge remover triggered 308 times
  0:01:30.059   265M / 9212M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Low coverage edge remover
  0:01:30.065   265M / 9212M INFO   Simplification           (parallel_processing.hpp   : 170)   Low coverage edge remover triggered 171 times
  0:01:30.066   265M / 9212M INFO    General                 (simplification.cpp        : 373)   PROCEDURE == Simplification cycle, iteration 3
  0:01:30.066   265M / 9212M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Tip clipper
  0:01:30.088   265M / 9212M INFO   Simplification           (parallel_processing.hpp   : 170)   Tip clipper triggered 139 times
  0:01:30.088   265M / 9212M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Bulge remover
  0:01:30.108   265M / 9212M INFO   Simplification           (parallel_processing.hpp   : 170)   Bulge remover triggered 46 times
  0:01:30.109   265M / 9212M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Low coverage edge remover
  0:01:30.111   265M / 9212M INFO   Simplification           (parallel_processing.hpp   : 170)   Low coverage edge remover triggered 39 times
  0:01:30.111   265M / 9212M INFO    General                 (simplification.cpp        : 373)   PROCEDURE == Simplification cycle, iteration 4
  0:01:30.111   265M / 9212M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Tip clipper
  0:01:30.114   265M / 9212M INFO   Simplification           (parallel_processing.hpp   : 170)   Tip clipper triggered 38 times
  0:01:30.114   265M / 9212M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Bulge remover
  0:01:30.114   265M / 9212M INFO   Simplification           (parallel_processing.hpp   : 170)   Bulge remover triggered 1 times
  0:01:30.114   265M / 9212M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Low coverage edge remover
  0:01:30.114   265M / 9212M INFO   Simplification           (parallel_processing.hpp   : 170)   Low coverage edge remover triggered 11 times
  0:01:30.114   265M / 9212M INFO    General                 (simplification.cpp        : 373)   PROCEDURE == Simplification cycle, iteration 5
  0:01:30.114   265M / 9212M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Tip clipper
  0:01:30.115   265M / 9212M INFO   Simplification           (parallel_processing.hpp   : 170)   Tip clipper triggered 14 times
  0:01:30.115   265M / 9212M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Bulge remover
  0:01:30.115   265M / 9212M INFO   Simplification           (parallel_processing.hpp   : 170)   Bulge remover triggered 0 times
  0:01:30.115   265M / 9212M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Low coverage edge remover
  0:01:30.116   265M / 9212M INFO   Simplification           (parallel_processing.hpp   : 170)   Low coverage edge remover triggered 6 times
  0:01:30.116   265M / 9212M INFO    General                 (simplification.cpp        : 373)   PROCEDURE == Simplification cycle, iteration 6
  0:01:30.116   265M / 9212M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Tip clipper
  0:01:30.116   265M / 9212M INFO   Simplification           (parallel_processing.hpp   : 170)   Tip clipper triggered 7 times
  0:01:30.116   265M / 9212M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Bulge remover
  0:01:30.116   265M / 9212M INFO   Simplification           (parallel_processing.hpp   : 170)   Bulge remover triggered 0 times
  0:01:30.116   265M / 9212M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Low coverage edge remover
  0:01:30.116   265M / 9212M INFO   Simplification           (parallel_processing.hpp   : 170)   Low coverage edge remover triggered 4 times
  0:01:30.116   265M / 9212M INFO    General                 (simplification.cpp        : 373)   PROCEDURE == Simplification cycle, iteration 7
  0:01:30.116   265M / 9212M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Tip clipper
  0:01:30.116   265M / 9212M INFO   Simplification           (parallel_processing.hpp   : 170)   Tip clipper triggered 4 times
  0:01:30.116   265M / 9212M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Bulge remover
  0:01:30.116   265M / 9212M INFO   Simplification           (parallel_processing.hpp   : 170)   Bulge remover triggered 0 times
  0:01:30.117   265M / 9212M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Low coverage edge remover
  0:01:30.117   265M / 9212M INFO   Simplification           (parallel_processing.hpp   : 170)   Low coverage edge remover triggered 1 times
  0:01:30.117   265M / 9212M INFO    General                 (simplification.cpp        : 373)   PROCEDURE == Simplification cycle, iteration 8
  0:01:30.117   265M / 9212M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Tip clipper
  0:01:30.117   265M / 9212M INFO   Simplification           (parallel_processing.hpp   : 170)   Tip clipper triggered 2 times
  0:01:30.117   265M / 9212M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Bulge remover
  0:01:30.117   265M / 9212M INFO   Simplification           (parallel_processing.hpp   : 170)   Bulge remover triggered 0 times
  0:01:30.117   265M / 9212M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Low coverage edge remover
  0:01:30.118   265M / 9212M INFO   Simplification           (parallel_processing.hpp   : 170)   Low coverage edge remover triggered 2 times
  0:01:30.118   265M / 9212M INFO    General                 (simplification.cpp        : 373)   PROCEDURE == Simplification cycle, iteration 9
  0:01:30.118   265M / 9212M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Tip clipper
  0:01:30.118   265M / 9212M INFO   Simplification           (parallel_processing.hpp   : 170)   Tip clipper triggered 2 times
  0:01:30.118   265M / 9212M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Bulge remover
  0:01:30.118   265M / 9212M INFO   Simplification           (parallel_processing.hpp   : 170)   Bulge remover triggered 0 times
  0:01:30.118   265M / 9212M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Low coverage edge remover
  0:01:30.118   265M / 9212M INFO   Simplification           (parallel_processing.hpp   : 170)   Low coverage edge remover triggered 1 times
  0:01:30.118   265M / 9212M INFO    General                 (simplification.cpp        : 373)   PROCEDURE == Simplification cycle, iteration 10
  0:01:30.118   265M / 9212M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Tip clipper
  0:01:30.118   265M / 9212M INFO   Simplification           (parallel_processing.hpp   : 170)   Tip clipper triggered 2 times
  0:01:30.118   265M / 9212M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Bulge remover
  0:01:30.118   265M / 9212M INFO   Simplification           (parallel_processing.hpp   : 170)   Bulge remover triggered 0 times
  0:01:30.118   265M / 9212M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Low coverage edge remover
  0:01:30.122   265M / 9212M INFO   Simplification           (parallel_processing.hpp   : 170)   Low coverage edge remover triggered 3 times
  0:01:30.122   265M / 9212M INFO    General                 (simplification.cpp        : 373)   PROCEDURE == Simplification cycle, iteration 11
  0:01:30.122   265M / 9212M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Tip clipper
  0:01:30.126   265M / 9212M INFO   Simplification           (parallel_processing.hpp   : 170)   Tip clipper triggered 0 times
  0:01:30.126   265M / 9212M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Bulge remover
  0:01:30.130   265M / 9212M INFO   Simplification           (parallel_processing.hpp   : 170)   Bulge remover triggered 0 times
  0:01:30.130   265M / 9212M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Low coverage edge remover
  0:01:30.134   265M / 9212M INFO   Simplification           (parallel_processing.hpp   : 170)   Low coverage edge remover triggered 0 times
  0:01:30.139   265M / 9212M INFO   StageManager             (stage.cpp                 : 185)   STAGE == Gap Closer (id: late_gapcloser)
  0:01:30.145   274M / 9212M INFO    General                 (edge_index.hpp            : 113)   Size of edge index entries: 12/8
  0:01:30.149   274M / 9212M INFO    General                 (gap_closer.cpp            : 101)   Total edges in tip neighborhood: 2292 out of 3464, length: 409897
  0:01:30.150   274M / 9212M INFO    General                 (edge_index.hpp            : 167)   Using small index (max_id = 2148843)
  0:01:30.151   274M / 9212M INFO   K-mer Index Building     (kmer_index_builder.hpp    : 395)   Building perfect hash indices
  0:01:30.160   274M / 9212M INFO   K-mer Index Building     (kmer_index_builder.hpp    : 431)   Index built. Total 205051 kmers, 148840 bytes occupied (5.80695 bits per kmer).
  0:01:30.160   276M / 9212M INFO    General                 (edge_index_builders.hpp   : 265)   Collecting edge information from graph, this takes a while.
  0:01:35.511   276M / 9212M INFO    General                 (sequence_mapper_notifier.h:  77)   Processed 200000 reads
  0:01:35.520   276M / 9212M INFO    General                 (sequence_mapper_notifier.h:  77)   Processed 400000 reads
  0:01:35.605   276M / 9212M INFO    General                 (sequence_mapper_notifier.h:  77)   Processed 600000 reads
  0:01:35.626   276M / 9212M INFO    General                 (sequence_mapper_notifier.h:  77)   Processed 800000 reads
  0:01:35.709   276M / 9212M INFO    General                 (sequence_mapper_notifier.h:  77)   Processed 1000000 reads
  0:01:35.725   276M / 9212M INFO    General                 (sequence_mapper_notifier.h:  77)   Processed 1200000 reads
  0:01:35.825   276M / 9212M INFO    General                 (sequence_mapper_notifier.h:  77)   Processed 2200000 reads
  0:01:41.086   276M / 9212M INFO    General                 (sequence_mapper_notifier.h:  77)   Processed 4200000 reads
  0:01:44.266   276M / 9212M INFO    General                 (sequence_mapper_notifier.h:  95)   Total 7775783 reads processed
  0:01:44.280   274M / 9212M INFO    General                 (gap_closer.cpp            : 452)   Initializing gap closer
  0:01:44.280   274M / 9212M INFO   GapCloser                (gap_closer.cpp            : 359)   Closing short gaps
  0:01:44.291   274M / 9212M INFO   GapCloser                (gap_closer.cpp            : 391)   Closing short gaps complete: filled 0 gaps after checking 8 candidates
  0:01:44.296   274M / 9212M INFO    General                 (gap_closer.cpp            : 456)   Gap closer done
  0:01:44.297   265M / 9212M INFO   StageManager             (stage.cpp                 : 185)   STAGE == Simplification Cleanup (id: simplification_cleanup)
  0:01:44.297   265M / 9212M INFO    General                 (simplification.cpp        : 176)   PROCEDURE == Post simplification
  0:01:44.297   265M / 9212M INFO    General                 (graph_simplification.hpp  : 448)   Disconnection of relatively low covered edges disabled
  0:01:44.297   265M / 9212M INFO    General                 (graph_simplification.hpp  : 485)   Complex tip clipping disabled
  0:01:44.297   265M / 9212M INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance
  0:01:44.297   265M / 9212M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Tip clipper
  0:01:44.301   265M / 9212M INFO   Simplification           (parallel_processing.hpp   : 170)   Tip clipper triggered 0 times
  0:01:44.301   265M / 9212M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Bulge remover
  0:01:44.306   265M / 9212M INFO   Simplification           (parallel_processing.hpp   : 170)   Bulge remover triggered 0 times
  0:01:44.306   265M / 9212M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Tip clipper
  0:01:44.310   265M / 9212M INFO   Simplification           (parallel_processing.hpp   : 170)   Tip clipper triggered 0 times
  0:01:44.310   265M / 9212M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Bulge remover
  0:01:44.314   265M / 9212M INFO   Simplification           (parallel_processing.hpp   : 170)   Bulge remover triggered 0 times
  0:01:44.314   265M / 9212M INFO    General                 (simplification.cpp        : 327)   Disrupting self-conjugate edges
  0:01:44.318   265M / 9212M INFO   Simplification           (parallel_processing.hpp   : 167)   Running Removing isolated edges
  0:01:44.323   265M / 9212M INFO   Simplification           (parallel_processing.hpp   : 170)   Removing isolated edges triggered 204 times
  0:01:44.326   265M / 9212M INFO    General                 (simplification.cpp        : 495)   After simplification:
  0:01:44.326   265M / 9212M INFO    General                 (simplification.cpp        : 496)     Average coverage = 127.902
  0:01:44.329   265M / 9212M INFO    General                 (simplification.cpp        : 497)     Total length = 4388241
  0:01:44.332   265M / 9212M INFO    General                 (simplification.cpp        : 498)     Median edge length: 130059
  0:01:44.332   265M / 9212M INFO    General                 (simplification.cpp        : 499)     Edges: 3056
  0:01:44.332   265M / 9212M INFO    General                 (simplification.cpp        : 500)     Vertices: 4536
  0:01:44.332   265M / 9212M INFO   StageManager             (stage.cpp                 : 185)   STAGE == Mismatch Correction (id: mismatch_correction)
  0:01:44.332   265M / 9212M INFO    General                 (graph_pack.cpp            :  67)   Index refill
  0:01:44.332   265M / 9212M INFO    General                 (edge_index.hpp            : 156)   Using small index (max_id = 2148843)
  0:01:44.372   265M / 9212M INFO   K-mer Index Building     (kmer_index_builder.hpp    : 395)   Building perfect hash indices
  0:01:44.663   268M / 9212M INFO   K-mer Index Building     (kmer_index_builder.hpp    : 431)   Index built. Total 4388241 kmers, 3170232 bytes occupied (5.7795 bits per kmer).
  0:01:44.687   304M / 9212M INFO    General                 (edge_index_builders.hpp   : 252)   Collecting edge information from graph, this takes a while.
  0:01:44.786   304M / 9212M INFO    General                 (graph_pack.cpp            :  77)   Normalizing k-mer map. Total 526462 kmers to process
  0:01:44.919   304M / 9212M INFO    General                 (graph_pack.cpp            :  79)   Normalizing done
  0:01:44.919   304M / 9212M INFO    General                 (mismatch_correction.cpp   : 400)   Collect potential mismatches
  0:01:45.040   305M / 9212M INFO    General                 (mismatch_correction.cpp   : 192)   Total 624 edges (out of 3056) with 13558 potential mismatch positions (21.7276 positions per edge)
  0:01:45.040   305M / 9212M INFO    General                 (mismatch_correction.cpp   : 402)   Potential mismatches collected
  0:01:46.063   305M / 9212M INFO    General                 (sequence_mapper_notifier.h:  77)   Processed 200000 reads
  0:01:46.065   306M / 9212M INFO    General                 (sequence_mapper_notifier.h:  77)   Processed 400000 reads
  0:01:46.066   307M / 9212M INFO    General                 (sequence_mapper_notifier.h:  77)   Processed 600000 reads
  0:01:46.069   308M / 9212M INFO    General                 (sequence_mapper_notifier.h:  77)   Processed 800000 reads
  0:01:46.072   308M / 9212M INFO    General                 (sequence_mapper_notifier.h:  77)   Processed 1000000 reads
  0:01:46.076   309M / 9212M INFO    General                 (sequence_mapper_notifier.h:  77)   Processed 1200000 reads
  0:01:46.101   310M / 9212M INFO    General                 (sequence_mapper_notifier.h:  77)   Processed 2200000 reads
  0:01:47.035   311M / 9212M INFO    General                 (sequence_mapper_notifier.h:  77)   Processed 4200000 reads
  0:01:48.044   312M / 9212M INFO    General                 (sequence_mapper_notifier.h:  77)   Processed 8400000 reads
  0:01:50.788   313M / 9212M INFO    General                 (sequence_mapper_notifier.h:  77)   Processed 16800000 reads
  0:01:55.257   323M / 9212M INFO    General                 (sequence_mapper_notifier.h:  95)   Total 31305702 reads processed
  0:01:55.307   306M / 9212M INFO    General                 (mismatch_correction.cpp   : 395)   All edges processed
  0:01:55.308   304M / 9212M INFO    General                 (mismatch_correction.cpp   : 450)   Corrected 0 nucleotides
  0:01:55.308   304M / 9212M INFO   StageManager             (stage.cpp                 : 185)   STAGE == Contig Output (id: contig_output)
  0:01:55.308   304M / 9212M INFO    General                 (contig_output.hpp         :  16)   Outputting contigs to /bios-store5/lyt/test_sample/sample3/spades_result_unique_new/K77/before_rr.fasta
  0:01:55.353   304M / 9212M INFO    General                 (contig_output_stage.cpp   : 151)   Writing GFA graph to /bios-store5/lyt/test_sample/sample3/spades_result_unique_new/K77/assembly_graph_after_simplification.gfa
  0:01:55.388   304M / 9212M INFO   StageManager             (stage.cpp                 : 185)   STAGE == Paired Information Counting (id: late_pair_info_count)
  0:01:55.399   305M / 9212M INFO    General                 (graph_pack.cpp            :  77)   Normalizing k-mer map. Total 526462 kmers to process
  0:01:55.399   305M / 9212M INFO    General                 (graph_pack.cpp            :  79)   Normalizing done
  0:01:55.402   305M / 9212M INFO    General                 (pair_info_count.cpp       : 339)   Min edge length for estimation: 130059
  0:01:55.402   305M / 9212M INFO    General                 (pair_info_count.cpp       : 350)   Estimating insert size for library #0
  0:01:55.403   305M / 9212M INFO    General                 (pair_info_count.cpp       : 202)   Estimating insert size (takes a while)
  0:01:55.516   577M / 9212M INFO    General                 (pair_info_count.cpp       :  48)   Selecting usual mapper
  0:01:56.890   577M / 9212M INFO    General                 (sequence_mapper_notifier.h:  77)   Processed 200000 reads
  0:01:56.919   577M / 9212M INFO    General                 (sequence_mapper_notifier.h:  77)   Processed 400000 reads
  0:01:56.948   577M / 9212M INFO    General                 (sequence_mapper_notifier.h:  77)   Processed 600000 reads
  0:01:56.980   577M / 9212M INFO    General                 (sequence_mapper_notifier.h:  77)   Processed 800000 reads
  0:01:57.010   577M / 9212M INFO    General                 (sequence_mapper_notifier.h:  77)   Processed 1000000 reads
  0:01:57.044   577M / 9212M INFO    General                 (sequence_mapper_notifier.h:  77)   Processed 1200000 reads
  0:01:57.241   577M / 9212M INFO    General                 (sequence_mapper_notifier.h:  77)   Processed 2200000 reads
  0:01:58.517   577M / 9212M INFO    General                 (sequence_mapper_notifier.h:  77)   Processed 4200000 reads
  0:02:00.217   577M / 9212M INFO    General                 (sequence_mapper_notifier.h:  95)   Total 7775783 reads processed
  0:02:00.485   577M / 9212M INFO    General                 (pair_info_count.cpp       : 220)   Edge pairs: 10991
  0:02:00.485   577M / 9212M INFO    General                 (pair_info_count.cpp       : 222)   2717937 paired reads (34.9539% of all) aligned to long edges
  0:02:00.485   305M / 9212M INFO    General                 (pair_info_count.cpp       : 369)     Insert size = 168.809, deviation = 82.8619, left quantile = 89, right quantile = 283, read length = 150
  0:02:00.486   305M / 9212M INFO    General                 (pair_info_count.cpp       : 390)   Filtering data for library #0
  0:02:00.488   305M / 9212M INFO    General                 (pair_info_count.cpp       :  48)   Selecting usual mapper
  0:02:01.929   305M / 9212M INFO    General                 (sequence_mapper_notifier.h:  77)   Processed 200000 reads
  0:02:01.930   305M / 9212M INFO    General                 (sequence_mapper_notifier.h:  77)   Processed 400000 reads
  0:02:01.932   305M / 9212M INFO    General                 (sequence_mapper_notifier.h:  77)   Processed 600000 reads
  0:02:01.940   305M / 9212M INFO    General                 (sequence_mapper_notifier.h:  77)   Processed 800000 reads
  0:02:01.941   305M / 9212M INFO    General                 (sequence_mapper_notifier.h:  77)   Processed 1000000 reads
  0:02:01.942   305M / 9212M INFO    General                 (sequence_mapper_notifier.h:  77)   Processed 1200000 reads
  0:02:01.967   305M / 9212M INFO    General                 (sequence_mapper_notifier.h:  77)   Processed 2200000 reads
  0:02:03.322   305M / 9212M INFO    General                 (sequence_mapper_notifier.h:  77)   Processed 4200000 reads
  0:02:04.116   305M / 9212M INFO    General                 (sequence_mapper_notifier.h:  95)   Total 7775783 reads processed
  0:02:04.116   305M / 9212M INFO    General                 (pair_info_count.cpp       : 402)   Mapping library #0
  0:02:04.116   305M / 9212M INFO    General                 (pair_info_count.cpp       : 404)   Mapping paired reads (takes a while)
  0:02:04.116   305M / 9212M INFO    General                 (pair_info_count.cpp       : 299)   Left insert size quantile 89, right insert size quantile 283, filtering threshold 2, rounding threshold 0
  0:02:04.137   314M / 9212M INFO    General                 (pair_info_count.cpp       :  48)   Selecting usual mapper
  0:02:05.781   314M / 9212M INFO    General                 (sequence_mapper_notifier.h:  77)   Processed 200000 reads
  0:02:05.785   315M / 9212M INFO    General                 (sequence_mapper_notifier.h:  77)   Processed 400000 reads
  0:02:05.793   315M / 9212M INFO    General                 (sequence_mapper_notifier.h:  77)   Processed 600000 reads
  0:02:05.794   315M / 9212M INFO    General                 (sequence_mapper_notifier.h:  77)   Processed 800000 reads
  0:02:05.796   315M / 9212M INFO    General                 (sequence_mapper_notifier.h:  77)   Processed 1000000 reads
  0:02:05.797   315M / 9212M INFO    General                 (sequence_mapper_notifier.h:  77)   Processed 1200000 reads
  0:02:05.811   315M / 9212M INFO    General                 (sequence_mapper_notifier.h:  77)   Processed 2200000 reads
  0:02:07.454   315M / 9212M INFO    General                 (sequence_mapper_notifier.h:  77)   Processed 4200000 reads
  0:02:08.322   317M / 9212M INFO    General                 (sequence_mapper_notifier.h:  95)   Total 7775783 reads processed
  0:02:08.331   308M / 9212M INFO   StageManager             (stage.cpp                 : 185)   STAGE == Distance Estimation (id: distance_estimation)
  0:02:08.331   308M / 9212M INFO    General                 (distance_estimation.cpp   : 179)   Processing library #0
  0:02:08.331   308M / 9212M INFO    General                 (distance_estimation.cpp   : 150)   Weight Filter Done
  0:02:08.331   308M / 9212M INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator
  0:02:08.342   308M / 9212M INFO    General                 (distance_estimation.cpp   :  37)   Filtering info
  0:02:08.342   308M / 9212M INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; library index size: 9732
  0:02:08.345   308M / 9212M INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering; library index size: 6378
  0:02:08.345   308M / 9212M INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information
  0:02:08.347   308M / 9212M INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished
  0:02:08.347   308M / 9212M INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information
  0:02:08.361   308M / 9212M INFO   PairInfoImprover         (pair_info_improver.hpp    : 104)   Paired info stats: missing = 32; contradictional = 158
  0:02:08.374   308M / 9212M INFO   PairInfoImprover         (pair_info_improver.hpp    : 104)   Paired info stats: missing = 0; contradictional = 0
  0:02:08.374   308M / 9212M INFO    General                 (distance_estimation.cpp   : 104)   Filling scaffolding index
  0:02:08.374   308M / 9212M INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator
  0:02:08.389   308M / 9212M INFO    General                 (distance_estimation.cpp   :  37)   Filtering info
  0:02:08.389   308M / 9212M INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; library index size: 4016
  0:02:08.390   308M / 9212M INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering; library index size: 4016
  0:02:08.390   308M / 9212M INFO    General                 (distance_estimation.cpp   : 186)   Clearing raw paired index
  0:02:08.392   305M / 9212M INFO   StageManager             (stage.cpp                 : 185)   STAGE == Repeat Resolving (id: repeat_resolving)
  0:02:08.393   305M / 9212M INFO    General                 (repeat_resolving.cpp      :  87)   Using Path-Extend repeat resolving
  0:02:08.393   305M / 9212M INFO    General                 (launcher.cpp              : 600)   ExSPAnder repeat resolving tool started
  0:02:08.399   305M / 9212M INFO    General                 (coverage_uniformity_analyz:  25)   genomic coverage is 128.542 calculated of length 4135880
  0:02:08.403   305M / 9212M WARN    General                 (launcher.cpp              : 178)   Your data seems to have high uniform coverage depth. It is strongly recommended to use --isolate option.
  0:02:08.410   311M / 9212M INFO    General                 (launcher.cpp              : 418)   Creating main extenders, unique edge length = 2000
  0:02:08.410   311M / 9212M INFO    General                 (extenders_logic.cpp       : 334)   Estimated coverage of library #0 is 127.902
  0:02:08.410   311M / 9212M INFO    General                 (extenders_logic.cpp       : 345)   Creating extender; library index size: 6284
  0:02:08.410   311M / 9212M INFO    General                 (extenders_logic.cpp       : 334)   Estimated coverage of library #0 is 127.902
  0:02:08.410   311M / 9212M INFO    General                 (extenders_logic.cpp       : 345)   Creating extender; library index size: 6284
  0:02:08.413   312M / 9212M INFO    General                 (extenders_logic.cpp       : 543)   Using 1 paired-end library
  0:02:08.413   312M / 9212M INFO    General                 (extenders_logic.cpp       : 544)   Using 1 paired-end scaffolding library
  0:02:08.413   312M / 9212M INFO    General                 (extenders_logic.cpp       : 545)   Using 0 single read libraries
  0:02:08.413   312M / 9212M INFO    General                 (launcher.cpp              : 447)   Total number of extenders is 3
  0:02:08.413   312M / 9212M INFO    General                 (path_extenders.cpp        :  36)   Processed 0 paths from 1459 (0%)
  0:02:08.430   313M / 9212M INFO    General                 (path_extenders.cpp        :  34)   Processed 128 paths from 1459 (8%)
  0:02:08.432   313M / 9212M INFO    General                 (path_extenders.cpp        :  36)   Processed 146 paths from 1459 (10%)
  0:02:08.435   314M / 9212M INFO    General                 (path_extenders.cpp        :  34)   Processed 256 paths from 1459 (17%)
  0:02:08.436   314M / 9212M INFO    General                 (path_extenders.cpp        :  36)   Processed 292 paths from 1459 (20%)
  0:02:08.437   314M / 9212M INFO    General                 (path_extenders.cpp        :  36)   Processed 438 paths from 1459 (30%)
  0:02:08.438   315M / 9212M INFO    General                 (path_extenders.cpp        :  34)   Processed 512 paths from 1459 (35%)
  0:02:08.438   315M / 9212M INFO    General                 (path_extenders.cpp        :  36)   Processed 584 paths from 1459 (40%)
  0:02:08.439   315M / 9212M INFO    General                 (path_extenders.cpp        :  36)   Processed 730 paths from 1459 (50%)
  0:02:08.440   316M / 9212M INFO    General                 (path_extenders.cpp        :  36)   Processed 876 paths from 1459 (60%)
  0:02:08.440   317M / 9212M INFO    General                 (path_extenders.cpp        :  36)   Processed 1022 paths from 1459 (70%)
  0:02:08.440   317M / 9212M INFO    General                 (path_extenders.cpp        :  34)   Processed 1024 paths from 1459 (70%)
  0:02:08.442   317M / 9212M INFO    General                 (path_extenders.cpp        :  36)   Processed 1168 paths from 1459 (80%)
  0:02:08.446   318M / 9212M INFO    General                 (path_extenders.cpp        :  36)   Processed 1314 paths from 1459 (90%)
  0:02:08.447   318M / 9212M INFO    General                 (launcher.cpp              : 250)   Finalizing paths
  0:02:08.447   318M / 9212M INFO    General                 (launcher.cpp              : 252)   Deduplicating paths
  0:02:08.448   317M / 9212M INFO    General                 (launcher.cpp              : 256)   Paths deduplicated
  0:02:08.449   317M / 9212M INFO   PEResolver               (pe_resolver.cpp           :  60)   Removing overlaps
  0:02:08.449   317M / 9212M INFO   PEResolver               (pe_resolver.cpp           :  63)   Sorting paths
  0:02:08.449   317M / 9212M INFO   PEResolver               (pe_resolver.cpp           :  70)   Marking overlaps
  0:02:08.449   317M / 9212M INFO   OverlapRemover           (overlap_remover.hpp       : 116)   Marking start/end overlaps
  0:02:08.451   318M / 9212M INFO   OverlapRemover           (overlap_remover.hpp       : 119)   Marking remaining overlaps
  0:02:08.452   318M / 9212M INFO   PEResolver               (pe_resolver.cpp           :  73)   Splitting paths
  0:02:08.453   318M / 9212M INFO   PEResolver               (pe_resolver.cpp           :  78)   Deduplicating paths
  0:02:08.454   317M / 9212M INFO   PEResolver               (pe_resolver.cpp           :  80)   Overlaps removed
  0:02:08.457   318M / 9212M INFO    General                 (launcher.cpp              : 273)   Paths finalized
  0:02:08.457   318M / 9212M INFO    General                 (launcher.cpp              : 454)   Closing gaps in paths
  0:02:08.465   322M / 9212M INFO    General                 (launcher.cpp              : 484)   Gap closing completed
  0:02:08.466   323M / 9212M INFO    General                 (launcher.cpp              : 302)   Traversing tandem repeats
  0:02:08.474   323M / 9212M INFO    General                 (launcher.cpp              : 312)   Traversed 0 loops
  0:02:08.474   323M / 9212M INFO    General                 (launcher.cpp              : 250)   Finalizing paths
  0:02:08.474   323M / 9212M INFO    General                 (launcher.cpp              : 252)   Deduplicating paths
  0:02:08.474   323M / 9212M INFO    General                 (launcher.cpp              : 256)   Paths deduplicated
  0:02:08.474   323M / 9212M INFO   PEResolver               (pe_resolver.cpp           :  60)   Removing overlaps
  0:02:08.474   323M / 9212M INFO   PEResolver               (pe_resolver.cpp           :  63)   Sorting paths
  0:02:08.475   323M / 9212M INFO   PEResolver               (pe_resolver.cpp           :  70)   Marking overlaps
  0:02:08.475   323M / 9212M INFO   OverlapRemover           (overlap_remover.hpp       : 116)   Marking start/end overlaps
  0:02:08.475   323M / 9212M INFO   OverlapRemover           (overlap_remover.hpp       : 119)   Marking remaining overlaps
  0:02:08.476   323M / 9212M INFO   PEResolver               (pe_resolver.cpp           :  73)   Splitting paths
  0:02:08.476   323M / 9212M INFO   PEResolver               (pe_resolver.cpp           :  78)   Deduplicating paths
  0:02:08.477   323M / 9212M INFO   PEResolver               (pe_resolver.cpp           :  80)   Overlaps removed
  0:02:08.479   323M / 9212M INFO    General                 (launcher.cpp              : 273)   Paths finalized
  0:02:08.480   323M / 9212M INFO    General                 (launcher.cpp              : 664)   ExSPAnder repeat resolving tool finished
  0:02:08.484   310M / 9212M INFO   StageManager             (stage.cpp                 : 185)   STAGE == Contig Output (id: contig_output)
  0:02:08.484   310M / 9212M INFO    General                 (contig_output.hpp         :  16)   Outputting contigs to /bios-store5/lyt/test_sample/sample3/spades_result_unique_new/K77/before_rr.fasta
  0:02:08.527   310M / 9212M INFO    General                 (contig_output_stage.cpp   : 151)   Writing GFA graph to /bios-store5/lyt/test_sample/sample3/spades_result_unique_new/K77/assembly_graph_with_scaffolds.gfa
  0:02:08.552   310M / 9212M INFO    General                 (contig_output_stage.cpp   : 165)   Outputting FastG graph to /bios-store5/lyt/test_sample/sample3/spades_result_unique_new/K77/assembly_graph.fastg
  0:02:08.642   310M / 9212M INFO    General                 (contig_output_stage.cpp   : 196)   Breaking scaffolds
  0:02:08.664   320M / 9212M INFO    General                 (contig_output_stage.cpp   :  98)   Outputting contigs to /bios-store5/lyt/test_sample/sample3/spades_result_unique_new/K77/final_contigs.fasta
  0:02:08.687   320M / 9212M INFO    General                 (contig_output_stage.cpp   : 104)   Outputting FastG paths to /bios-store5/lyt/test_sample/sample3/spades_result_unique_new/K77/final_contigs.paths
  0:02:08.712   316M / 9212M INFO    General                 (contig_output_stage.cpp   :  98)   Outputting contigs to /bios-store5/lyt/test_sample/sample3/spades_result_unique_new/K77/scaffolds.fasta
  0:02:08.735   316M / 9212M INFO    General                 (contig_output_stage.cpp   : 104)   Outputting FastG paths to /bios-store5/lyt/test_sample/sample3/spades_result_unique_new/K77/scaffolds.paths
  0:02:08.739   316M / 9212M INFO    General                 (contig_output_stage.cpp   : 111)   Populating GFA with scaffold paths
  0:02:08.752   310M / 9212M INFO    General                 (pipeline.cpp              : 287)   SPAdes finished
  0:02:08.861     1M / 9212M INFO    General                 (main.cpp                  : 136)   Assembling time: 0 hours 2 minutes 8 seconds

===== K77 finished. 


===== Copy files started. 


== Running: /bios-store1/home/yutongli/.conda/envs/try_619_new/bin/python /bios-store5/lyt/python_demo_try/SeriesAnalysis/SPAdes-3.15.5-Linux/share/spades/spades_pipeline/scripts/copy_files.py /bios-store5/lyt/test_sample/sample3/spades_result_unique_new/K77/before_rr.fasta /bios-store5/lyt/test_sample/sample3/spades_result_unique_new/before_rr.fasta /bios-store5/lyt/test_sample/sample3/spades_result_unique_new/K77/assembly_graph_after_simplification.gfa /bios-store5/lyt/test_sample/sample3/spades_result_unique_new/assembly_graph_after_simplification.gfa /bios-store5/lyt/test_sample/sample3/spades_result_unique_new/K77/final_contigs.fasta /bios-store5/lyt/test_sample/sample3/spades_result_unique_new/contigs.fasta /bios-store5/lyt/test_sample/sample3/spades_result_unique_new/K77/first_pe_contigs.fasta /bios-store5/lyt/test_sample/sample3/spades_result_unique_new/first_pe_contigs.fasta /bios-store5/lyt/test_sample/sample3/spades_result_unique_new/K77/strain_graph.gfa /bios-store5/lyt/test_sample/sample3/spades_result_unique_new/strain_graph.gfa /bios-store5/lyt/test_sample/sample3/spades_result_unique_new/K77/scaffolds.fasta /bios-store5/lyt/test_sample/sample3/spades_result_unique_new/scaffolds.fasta /bios-store5/lyt/test_sample/sample3/spades_result_unique_new/K77/scaffolds.paths /bios-store5/lyt/test_sample/sample3/spades_result_unique_new/scaffolds.paths /bios-store5/lyt/test_sample/sample3/spades_result_unique_new/K77/assembly_graph_with_scaffolds.gfa /bios-store5/lyt/test_sample/sample3/spades_result_unique_new/assembly_graph_with_scaffolds.gfa /bios-store5/lyt/test_sample/sample3/spades_result_unique_new/K77/assembly_graph.fastg /bios-store5/lyt/test_sample/sample3/spades_result_unique_new/assembly_graph.fastg /bios-store5/lyt/test_sample/sample3/spades_result_unique_new/K77/final_contigs.paths /bios-store5/lyt/test_sample/sample3/spades_result_unique_new/contigs.paths


===== Copy files finished. 


===== Assembling finished. 


===== Breaking scaffolds started. 


== Running: /bios-store1/home/yutongli/.conda/envs/try_619_new/bin/python /bios-store5/lyt/python_demo_try/SeriesAnalysis/SPAdes-3.15.5-Linux/share/spades/spades_pipeline/scripts/breaking_scaffolds_script.py --result_scaffolds_filename /bios-store5/lyt/test_sample/sample3/spades_result_unique_new/scaffolds.fasta --misc_dir /bios-store5/lyt/test_sample/sample3/spades_result_unique_new/misc --threshold_for_breaking_scaffolds 3


===== Breaking scaffolds finished. 


===== Terminate started. 


===== Terminate finished. 

 * Corrected reads are in /bios-store5/lyt/test_sample/sample3/spades_result_unique_new/corrected/
 * Assembled contigs are in /bios-store5/lyt/test_sample/sample3/spades_result_unique_new/contigs.fasta
 * Assembled scaffolds are in /bios-store5/lyt/test_sample/sample3/spades_result_unique_new/scaffolds.fasta
 * Paths in the assembly graph corresponding to the contigs are in /bios-store5/lyt/test_sample/sample3/spades_result_unique_new/contigs.paths
 * Paths in the assembly graph corresponding to the scaffolds are in /bios-store5/lyt/test_sample/sample3/spades_result_unique_new/scaffolds.paths
 * Assembly graph is in /bios-store5/lyt/test_sample/sample3/spades_result_unique_new/assembly_graph.fastg
 * Assembly graph in GFA format is in /bios-store5/lyt/test_sample/sample3/spades_result_unique_new/assembly_graph_with_scaffolds.gfa

======= SPAdes pipeline finished WITH WARNINGS!

=== Error correction and assembling warnings:
 * 0:02:08.403   305M / 9212M WARN    General                 (launcher.cpp              : 178)   Your data seems to have high uniform coverage depth. It is strongly recommended to use --isolate option.
======= Warnings saved to /bios-store5/lyt/test_sample/sample3/spades_result_unique_new/warnings.log

SPAdes log can be found here: /bios-store5/lyt/test_sample/sample3/spades_result_unique_new/spades.log

Thank you for using SPAdes!
[bwa_index] Pack FASTA... 0.03 sec
[bwa_index] Construct BWT for the packed sequence...
[bwa_index] 1.27 seconds elapse.
[bwa_index] Update BWT... 0.02 sec
[bwa_index] Pack forward-only FASTA... 0.02 sec
[bwa_index] Construct SA from BWT and Occ... 0.49 sec
[main] Version: 0.7.18-r1243-dirty
[main] CMD: bwa index /bios-store5/lyt/test_sample/sample3//spades_result_unique_new/assembly.fasta
[main] Real time: 1.877 sec; CPU: 1.835 sec
[M::bwa_idx_load_from_disk] read 0 ALT contigs
[M::process] read 89936 sequences (10000213 bp)...
[M::process] read 90028 sequences (10000036 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 41378, 4, 3)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 177)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 385)
[M::mem_pestat] mean and std.dev: (131.62, 73.99)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 489)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89936 reads in 4.050 CPU sec, 3.971 real sec
[M::process] read 90250 sequences (10000003 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (4, 41406, 2, 1)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 176)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 382)
[M::mem_pestat] mean and std.dev: (131.52, 73.83)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 485)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 90028 reads in 4.186 CPU sec, 3.990 real sec
[M::process] read 89934 sequences (10000278 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 41483, 1, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 113, 175)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 379)
[M::mem_pestat] mean and std.dev: (130.83, 73.24)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 481)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 90250 reads in 4.349 CPU sec, 4.103 real sec
[M::process] read 90000 sequences (10000153 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (3, 41406, 4, 1)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 176)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 382)
[M::mem_pestat] mean and std.dev: (131.43, 73.51)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 485)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89934 reads in 4.151 CPU sec, 3.936 real sec
[M::process] read 89938 sequences (10000258 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 41470, 1, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 177)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 385)
[M::mem_pestat] mean and std.dev: (131.40, 73.62)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 489)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 90000 reads in 4.344 CPU sec, 4.098 real sec
[M::process] read 89700 sequences (10000055 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (1, 41377, 1, 0)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 178)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 388)
[M::mem_pestat] mean and std.dev: (132.46, 74.90)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 493)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89938 reads in 4.433 CPU sec, 4.201 real sec
[M::process] read 89970 sequences (10000261 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 41241, 0, 1)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (74, 115, 177)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 383)
[M::mem_pestat] mean and std.dev: (132.32, 73.94)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 486)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89700 reads in 4.323 CPU sec, 4.074 real sec
[M::process] read 89952 sequences (10000247 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (3, 41348, 0, 1)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 177)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 385)
[M::mem_pestat] mean and std.dev: (131.96, 74.30)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 489)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89970 reads in 4.358 CPU sec, 4.108 real sec
[M::process] read 90068 sequences (10000078 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 41410, 1, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 177)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 385)
[M::mem_pestat] mean and std.dev: (132.08, 74.64)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 489)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89952 reads in 4.317 CPU sec, 4.058 real sec
[M::process] read 90148 sequences (10000205 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 41385, 1, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 113, 176)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 382)
[M::mem_pestat] mean and std.dev: (131.49, 73.72)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 485)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 90068 reads in 4.298 CPU sec, 4.072 real sec
[M::process] read 89902 sequences (10000113 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 41635, 1, 0)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 113, 175)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 379)
[M::mem_pestat] mean and std.dev: (130.52, 72.90)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 481)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 90148 reads in 4.218 CPU sec, 3.975 real sec
[M::process] read 89772 sequences (10000241 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (3, 41363, 1, 4)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 175)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 379)
[M::mem_pestat] mean and std.dev: (130.97, 72.90)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 481)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89902 reads in 4.365 CPU sec, 4.134 real sec
[M::process] read 89974 sequences (10000062 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 41303, 2, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (74, 114, 177)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 383)
[M::mem_pestat] mean and std.dev: (132.07, 74.13)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 486)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89772 reads in 4.357 CPU sec, 4.112 real sec
[M::process] read 90072 sequences (10000231 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 41535, 1, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 176)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 382)
[M::mem_pestat] mean and std.dev: (131.32, 73.53)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 485)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89974 reads in 4.189 CPU sec, 3.968 real sec
[M::process] read 89816 sequences (10000085 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 41524, 0, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 176)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 382)
[M::mem_pestat] mean and std.dev: (131.30, 73.61)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 485)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 90072 reads in 4.175 CPU sec, 3.931 real sec
[M::process] read 89814 sequences (10000067 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (3, 41247, 2, 0)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 178)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 388)
[M::mem_pestat] mean and std.dev: (132.29, 74.38)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 493)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89816 reads in 4.292 CPU sec, 4.077 real sec
[M::process] read 89818 sequences (10000078 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (1, 41410, 2, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 177)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 385)
[M::mem_pestat] mean and std.dev: (132.20, 74.43)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 489)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89814 reads in 4.167 CPU sec, 3.930 real sec
[M::process] read 89962 sequences (10000095 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (1, 41327, 0, 0)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (74, 114, 175)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 377)
[M::mem_pestat] mean and std.dev: (130.90, 72.52)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 478)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89818 reads in 4.146 CPU sec, 3.941 real sec
[M::process] read 90004 sequences (10000116 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 41333, 5, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 177)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 385)
[M::mem_pestat] mean and std.dev: (132.05, 74.03)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 489)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89962 reads in 4.183 CPU sec, 3.959 real sec
[M::process] read 90074 sequences (10000208 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (1, 41470, 1, 1)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 176)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 382)
[M::mem_pestat] mean and std.dev: (131.24, 73.40)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 485)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 90004 reads in 4.260 CPU sec, 4.038 real sec
[M::process] read 89836 sequences (10000234 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (3, 41440, 2, 4)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (74, 113, 175)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 377)
[M::mem_pestat] mean and std.dev: (130.46, 72.31)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 478)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 90074 reads in 4.261 CPU sec, 4.008 real sec
[M::process] read 89854 sequences (10000209 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (1, 41296, 0, 1)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 115, 177)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 385)
[M::mem_pestat] mean and std.dev: (132.27, 74.32)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 489)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89836 reads in 4.356 CPU sec, 4.122 real sec
[M::process] read 89884 sequences (10000047 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (1, 41357, 2, 0)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 177)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 385)
[M::mem_pestat] mean and std.dev: (131.73, 73.66)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 489)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89854 reads in 4.299 CPU sec, 4.065 real sec
[M::process] read 89812 sequences (10000161 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 41372, 4, 0)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 177)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 385)
[M::mem_pestat] mean and std.dev: (131.90, 73.85)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 489)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89884 reads in 4.158 CPU sec, 3.946 real sec
[M::process] read 89876 sequences (10000094 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (4, 41277, 2, 1)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 177)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 385)
[M::mem_pestat] mean and std.dev: (132.18, 74.42)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 489)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89812 reads in 4.169 CPU sec, 3.951 real sec
[M::process] read 90208 sequences (10000288 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 41320, 4, 1)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 177)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 385)
[M::mem_pestat] mean and std.dev: (132.05, 74.17)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 489)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89876 reads in 4.319 CPU sec, 4.092 real sec
[M::process] read 89864 sequences (10000145 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 41490, 6, 1)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 113, 176)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 382)
[M::mem_pestat] mean and std.dev: (131.08, 73.67)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 485)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 90208 reads in 4.305 CPU sec, 4.053 real sec
[M::process] read 89750 sequences (10000232 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 41382, 1, 1)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 177)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 385)
[M::mem_pestat] mean and std.dev: (131.93, 74.19)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 489)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89864 reads in 4.190 CPU sec, 3.975 real sec
[M::process] read 90028 sequences (10000099 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 41196, 0, 0)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 115, 178)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 388)
[M::mem_pestat] mean and std.dev: (132.61, 74.66)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 493)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89750 reads in 4.314 CPU sec, 4.080 real sec
[M::process] read 89836 sequences (10000156 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (1, 41359, 4, 3)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 177)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 385)
[M::mem_pestat] mean and std.dev: (131.85, 74.09)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 489)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 90028 reads in 4.114 CPU sec, 3.897 real sec
[M::process] read 90240 sequences (10000097 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (3, 41230, 3, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 178)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 388)
[M::mem_pestat] mean and std.dev: (132.30, 74.72)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 493)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89836 reads in 4.289 CPU sec, 4.056 real sec
[M::process] read 89958 sequences (10000067 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 41456, 2, 1)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 113, 176)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 382)
[M::mem_pestat] mean and std.dev: (131.32, 73.99)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 485)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 90240 reads in 4.287 CPU sec, 4.064 real sec
[M::process] read 90020 sequences (10000151 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 41369, 3, 0)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 176)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 382)
[M::mem_pestat] mean and std.dev: (131.45, 73.52)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 485)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89958 reads in 4.345 CPU sec, 4.095 real sec
[M::process] read 89986 sequences (10000067 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 41359, 0, 6)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 175)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 379)
[M::mem_pestat] mean and std.dev: (131.24, 73.81)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 481)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 90020 reads in 4.246 CPU sec, 4.022 real sec
[M::process] read 89840 sequences (10000107 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (1, 41377, 4, 1)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 177)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 385)
[M::mem_pestat] mean and std.dev: (131.94, 74.21)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 489)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89986 reads in 4.152 CPU sec, 3.927 real sec
[M::process] read 89952 sequences (10000239 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 41373, 1, 1)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (74, 114, 176)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 380)
[M::mem_pestat] mean and std.dev: (131.74, 73.55)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 482)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89840 reads in 4.134 CPU sec, 3.922 real sec
[M::process] read 90152 sequences (10000154 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (3, 41368, 0, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 176)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 382)
[M::mem_pestat] mean and std.dev: (131.56, 73.78)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 485)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89952 reads in 4.249 CPU sec, 4.013 real sec
[M::process] read 90046 sequences (10000059 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (1, 41486, 3, 4)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 113, 176)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 382)
[M::mem_pestat] mean and std.dev: (131.01, 73.55)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 485)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 90152 reads in 4.302 CPU sec, 4.078 real sec
[M::process] read 89752 sequences (10000294 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 41435, 0, 1)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 176)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 382)
[M::mem_pestat] mean and std.dev: (131.08, 73.10)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 485)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 90046 reads in 4.312 CPU sec, 4.065 real sec
[M::process] read 90010 sequences (10000164 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 41349, 0, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 176)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 382)
[M::mem_pestat] mean and std.dev: (131.77, 73.50)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 485)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89752 reads in 4.255 CPU sec, 4.039 real sec
[M::process] read 89886 sequences (10000065 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (7, 41403, 2, 0)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 176)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 382)
[M::mem_pestat] mean and std.dev: (131.71, 74.16)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 485)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 90010 reads in 4.207 CPU sec, 3.973 real sec
[M::process] read 89992 sequences (10000110 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 41241, 0, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 177)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 385)
[M::mem_pestat] mean and std.dev: (132.19, 74.71)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 489)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89886 reads in 4.428 CPU sec, 4.205 real sec
[M::process] read 90010 sequences (10000026 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (1, 41399, 1, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (74, 113, 176)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 380)
[M::mem_pestat] mean and std.dev: (131.37, 73.46)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 482)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89992 reads in 4.325 CPU sec, 4.056 real sec
[M::process] read 90012 sequences (10000045 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 41384, 1, 1)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 176)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 382)
[M::mem_pestat] mean and std.dev: (131.19, 73.48)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 485)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 90010 reads in 4.246 CPU sec, 4.027 real sec
[M::process] read 90034 sequences (10000109 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (1, 41380, 1, 0)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 177)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 385)
[M::mem_pestat] mean and std.dev: (131.66, 74.19)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 489)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 90012 reads in 4.219 CPU sec, 3.997 real sec
[M::process] read 90048 sequences (10000265 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (3, 41428, 0, 1)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 177)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 385)
[M::mem_pestat] mean and std.dev: (131.99, 74.28)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 489)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 90034 reads in 4.351 CPU sec, 4.137 real sec
[M::process] read 89954 sequences (10000161 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 41456, 3, 1)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 176)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 382)
[M::mem_pestat] mean and std.dev: (131.28, 73.40)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 485)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 90048 reads in 4.211 CPU sec, 3.973 real sec
[M::process] read 89858 sequences (10000163 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (1, 41322, 4, 3)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 178)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 388)
[M::mem_pestat] mean and std.dev: (132.34, 74.78)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 493)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89954 reads in 4.345 CPU sec, 4.138 real sec
[M::process] read 90272 sequences (10000174 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 41250, 3, 1)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 177)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 385)
[M::mem_pestat] mean and std.dev: (132.03, 74.22)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 489)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89858 reads in 4.288 CPU sec, 4.049 real sec
[M::process] read 89674 sequences (10000085 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 41491, 0, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 113, 175)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 379)
[M::mem_pestat] mean and std.dev: (130.67, 73.03)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 481)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 90272 reads in 4.326 CPU sec, 4.109 real sec
[M::process] read 89884 sequences (10000113 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 41192, 2, 1)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 115, 177)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 385)
[M::mem_pestat] mean and std.dev: (131.93, 73.54)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 489)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89674 reads in 4.261 CPU sec, 4.027 real sec
[M::process] read 89878 sequences (10000009 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 41382, 2, 3)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 177)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 385)
[M::mem_pestat] mean and std.dev: (131.88, 74.06)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 489)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89884 reads in 4.172 CPU sec, 3.959 real sec
[M::process] read 90212 sequences (10000140 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 41311, 2, 0)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 176)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 382)
[M::mem_pestat] mean and std.dev: (131.73, 73.79)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 485)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89878 reads in 4.194 CPU sec, 3.965 real sec
[M::process] read 90046 sequences (10000126 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 41489, 1, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 113, 176)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 382)
[M::mem_pestat] mean and std.dev: (130.78, 73.30)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 485)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 90212 reads in 4.120 CPU sec, 3.914 real sec
[M::process] read 90084 sequences (10000156 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 41350, 2, 1)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 176)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 382)
[M::mem_pestat] mean and std.dev: (131.40, 73.78)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 485)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 90046 reads in 4.214 CPU sec, 3.995 real sec
[M::process] read 90018 sequences (10000203 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 41407, 1, 3)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 113, 175)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 379)
[M::mem_pestat] mean and std.dev: (130.77, 72.83)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 481)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 90084 reads in 4.278 CPU sec, 4.055 real sec
[M::process] read 90190 sequences (10000209 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 41414, 1, 1)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 176)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 382)
[M::mem_pestat] mean and std.dev: (131.30, 73.54)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 485)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 90018 reads in 4.181 CPU sec, 3.946 real sec
[M::process] read 89916 sequences (10000290 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 41429, 2, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 176)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 382)
[M::mem_pestat] mean and std.dev: (131.15, 73.50)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 485)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 90190 reads in 4.329 CPU sec, 4.115 real sec
[M::process] read 89976 sequences (10000043 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (1, 41334, 3, 3)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 113, 177)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 385)
[M::mem_pestat] mean and std.dev: (131.76, 74.13)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 489)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89916 reads in 4.204 CPU sec, 3.963 real sec
[M::process] read 90006 sequences (10000192 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (3, 41373, 0, 0)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 176)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 382)
[M::mem_pestat] mean and std.dev: (131.61, 73.84)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 485)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89976 reads in 4.283 CPU sec, 4.074 real sec
[M::process] read 89854 sequences (10000277 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 41328, 2, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 176)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 382)
[M::mem_pestat] mean and std.dev: (131.37, 73.59)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 485)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 90006 reads in 4.335 CPU sec, 4.068 real sec
[M::process] read 89850 sequences (10000008 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (5, 41323, 3, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 177)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 385)
[M::mem_pestat] mean and std.dev: (131.75, 73.77)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 489)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89854 reads in 4.265 CPU sec, 4.059 real sec
[M::process] read 89702 sequences (10000248 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 41301, 1, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (74, 114, 176)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 380)
[M::mem_pestat] mean and std.dev: (131.27, 72.93)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 482)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89850 reads in 4.205 CPU sec, 3.968 real sec
[M::process] read 90050 sequences (10000069 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (1, 41240, 0, 0)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (74, 115, 178)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 386)
[M::mem_pestat] mean and std.dev: (132.50, 74.31)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 490)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89702 reads in 4.385 CPU sec, 4.176 real sec
[M::process] read 89960 sequences (10000092 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (1, 41387, 0, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 176)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 382)
[M::mem_pestat] mean and std.dev: (131.04, 73.24)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 485)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 90050 reads in 4.253 CPU sec, 4.005 real sec
[M::process] read 89858 sequences (10000299 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 41269, 1, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 177)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 385)
[M::mem_pestat] mean and std.dev: (131.71, 73.99)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 489)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89960 reads in 4.187 CPU sec, 3.983 real sec
[M::process] read 89994 sequences (10000023 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 41296, 2, 0)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (74, 114, 176)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 380)
[M::mem_pestat] mean and std.dev: (131.14, 73.01)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 482)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89858 reads in 4.414 CPU sec, 4.180 real sec
[M::process] read 90218 sequences (10000099 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 41305, 2, 1)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 176)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 382)
[M::mem_pestat] mean and std.dev: (131.31, 73.58)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 485)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89994 reads in 4.150 CPU sec, 3.964 real sec
[M::process] read 90064 sequences (10000113 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (1, 41522, 1, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 113, 176)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 382)
[M::mem_pestat] mean and std.dev: (131.28, 73.86)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 485)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 90218 reads in 4.207 CPU sec, 3.987 real sec
[M::process] read 89958 sequences (10000163 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 41366, 0, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 113, 176)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 382)
[M::mem_pestat] mean and std.dev: (131.43, 73.84)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 485)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 90064 reads in 4.218 CPU sec, 4.022 real sec
[M::process] read 90064 sequences (10000075 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (6, 41295, 2, 0)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 176)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 382)
[M::mem_pestat] mean and std.dev: (130.94, 73.02)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 485)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89958 reads in 4.153 CPU sec, 3.928 real sec
[M::process] read 90188 sequences (10000173 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 41310, 1, 5)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 177)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 385)
[M::mem_pestat] mean and std.dev: (131.66, 74.16)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 489)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 90064 reads in 4.219 CPU sec, 4.003 real sec
[M::process] read 90104 sequences (10000041 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (3, 41411, 0, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 113, 176)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 382)
[M::mem_pestat] mean and std.dev: (131.04, 73.46)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 485)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 90188 reads in 4.281 CPU sec, 4.047 real sec
[M::process] read 89886 sequences (10000063 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (1, 41325, 1, 0)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 177)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 385)
[M::mem_pestat] mean and std.dev: (131.82, 74.35)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 489)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 90104 reads in 4.246 CPU sec, 4.023 real sec
[M::process] read 90176 sequences (10000254 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (4, 41263, 3, 5)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (74, 114, 176)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 380)
[M::mem_pestat] mean and std.dev: (131.33, 73.08)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 482)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89886 reads in 4.386 CPU sec, 4.149 real sec
[M::process] read 90018 sequences (10000271 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (1, 41374, 2, 4)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 113, 175)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 379)
[M::mem_pestat] mean and std.dev: (130.68, 72.94)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 481)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 90176 reads in 4.350 CPU sec, 4.122 real sec
[M::process] read 89912 sequences (10000005 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (4, 41288, 0, 6)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (74, 113, 176)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 380)
[M::mem_pestat] mean and std.dev: (131.53, 73.60)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 482)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 90018 reads in 4.271 CPU sec, 4.016 real sec
[M::process] read 89882 sequences (10000144 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 41363, 2, 1)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 178)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 388)
[M::mem_pestat] mean and std.dev: (132.34, 74.78)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 493)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89912 reads in 4.269 CPU sec, 4.052 real sec
[M::process] read 89888 sequences (10000157 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (1, 41314, 1, 0)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 178)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 388)
[M::mem_pestat] mean and std.dev: (132.23, 74.24)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 493)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89882 reads in 4.302 CPU sec, 4.080 real sec
[M::process] read 89914 sequences (10000035 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 41415, 0, 3)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (74, 114, 176)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 380)
[M::mem_pestat] mean and std.dev: (131.16, 73.05)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 482)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89888 reads in 4.066 CPU sec, 3.876 real sec
[M::process] read 89884 sequences (10000045 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (1, 41316, 0, 3)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 176)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 382)
[M::mem_pestat] mean and std.dev: (131.68, 73.82)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 485)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89914 reads in 4.256 CPU sec, 4.037 real sec
[M::process] read 90074 sequences (10000274 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (3, 41326, 0, 3)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (74, 114, 174)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 374)
[M::mem_pestat] mean and std.dev: (130.51, 72.03)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 474)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89884 reads in 4.321 CPU sec, 4.122 real sec
[M::process] read 89930 sequences (10000043 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 41494, 3, 1)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 176)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 382)
[M::mem_pestat] mean and std.dev: (131.21, 73.56)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 485)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 90074 reads in 4.184 CPU sec, 3.986 real sec
[M::process] read 89996 sequences (10000292 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (4, 41282, 0, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 176)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 382)
[M::mem_pestat] mean and std.dev: (131.47, 73.54)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 485)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89930 reads in 4.074 CPU sec, 3.859 real sec
[M::process] read 89882 sequences (10000062 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (3, 41341, 1, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 176)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 382)
[M::mem_pestat] mean and std.dev: (131.56, 73.93)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 485)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89996 reads in 4.231 CPU sec, 4.016 real sec
[M::process] read 89976 sequences (10000015 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 41310, 2, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 177)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 385)
[M::mem_pestat] mean and std.dev: (132.12, 74.25)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 489)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89882 reads in 4.123 CPU sec, 3.920 real sec
[M::process] read 90042 sequences (10000136 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 41295, 0, 5)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 178)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 388)
[M::mem_pestat] mean and std.dev: (132.34, 74.89)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 493)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89976 reads in 4.204 CPU sec, 3.968 real sec
[M::process] read 90026 sequences (10000092 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 41378, 1, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 176)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 382)
[M::mem_pestat] mean and std.dev: (130.95, 73.04)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 485)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 90042 reads in 4.208 CPU sec, 4.003 real sec
[M::process] read 90092 sequences (10000294 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (3, 41350, 2, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 113, 178)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 388)
[M::mem_pestat] mean and std.dev: (132.22, 74.69)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 493)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 90026 reads in 4.199 CPU sec, 3.976 real sec
[M::process] read 89984 sequences (10000140 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 41324, 0, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 175)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 379)
[M::mem_pestat] mean and std.dev: (130.92, 73.08)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 481)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 90092 reads in 4.216 CPU sec, 4.022 real sec
[M::process] read 89856 sequences (10000003 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 41340, 1, 0)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 177)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 385)
[M::mem_pestat] mean and std.dev: (132.09, 74.50)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 489)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89984 reads in 4.157 CPU sec, 3.935 real sec
[M::process] read 89852 sequences (10000236 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 41343, 2, 4)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (74, 114, 177)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 383)
[M::mem_pestat] mean and std.dev: (131.90, 73.72)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 486)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89856 reads in 4.130 CPU sec, 3.944 real sec
[M::process] read 89968 sequences (10000086 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (1, 41295, 1, 0)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 175)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 379)
[M::mem_pestat] mean and std.dev: (131.15, 73.16)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 481)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89852 reads in 4.251 CPU sec, 4.008 real sec
[M::process] read 89804 sequences (10000089 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (3, 41276, 2, 3)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 176)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 382)
[M::mem_pestat] mean and std.dev: (131.54, 73.65)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 485)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89968 reads in 4.257 CPU sec, 4.032 real sec
[M::process] read 89706 sequences (10000269 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (1, 41374, 0, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 115, 178)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 388)
[M::mem_pestat] mean and std.dev: (132.39, 74.53)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 493)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89804 reads in 4.157 CPU sec, 3.929 real sec
[M::process] read 89922 sequences (10000034 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 41222, 2, 0)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (74, 115, 178)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 386)
[M::mem_pestat] mean and std.dev: (132.60, 74.25)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 490)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89706 reads in 4.279 CPU sec, 4.032 real sec
[M::process] read 89848 sequences (10000215 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (4, 41316, 2, 0)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (74, 114, 176)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 380)
[M::mem_pestat] mean and std.dev: (131.19, 73.18)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 482)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89922 reads in 4.090 CPU sec, 3.850 real sec
[M::process] read 89880 sequences (10000066 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 41275, 0, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 176)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 382)
[M::mem_pestat] mean and std.dev: (131.89, 73.75)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 485)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89848 reads in 4.308 CPU sec, 4.105 real sec
[M::process] read 89988 sequences (10000114 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (3, 41444, 2, 1)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 177)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 385)
[M::mem_pestat] mean and std.dev: (132.12, 74.35)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 489)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89880 reads in 4.194 CPU sec, 3.936 real sec
[M::process] read 90076 sequences (10000201 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 41432, 1, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 177)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 385)
[M::mem_pestat] mean and std.dev: (132.14, 74.55)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 489)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89988 reads in 4.270 CPU sec, 4.046 real sec
[M::process] read 89936 sequences (10000070 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (4, 41425, 0, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 113, 176)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 382)
[M::mem_pestat] mean and std.dev: (131.17, 73.49)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 485)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 90076 reads in 4.238 CPU sec, 3.976 real sec
[M::process] read 89942 sequences (10000203 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 41309, 2, 0)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 176)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 382)
[M::mem_pestat] mean and std.dev: (131.51, 73.63)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 485)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89936 reads in 4.118 CPU sec, 3.911 real sec
[M::process] read 89788 sequences (10000244 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 41396, 2, 3)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (74, 114, 176)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 380)
[M::mem_pestat] mean and std.dev: (131.39, 73.46)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 482)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89942 reads in 4.269 CPU sec, 4.038 real sec
[M::process] read 90066 sequences (10000193 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 41235, 1, 0)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 177)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 385)
[M::mem_pestat] mean and std.dev: (132.08, 74.19)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 489)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89788 reads in 4.243 CPU sec, 4.020 real sec
[M::process] read 89660 sequences (10000023 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 41374, 1, 0)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 176)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 382)
[M::mem_pestat] mean and std.dev: (131.40, 73.77)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 485)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 90066 reads in 4.134 CPU sec, 3.919 real sec
[M::process] read 90260 sequences (10000005 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 41082, 0, 1)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (74, 114, 177)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 383)
[M::mem_pestat] mean and std.dev: (132.20, 74.05)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 486)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89660 reads in 4.099 CPU sec, 3.942 real sec
[M::process] read 89832 sequences (10000075 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (1, 41471, 1, 1)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 113, 175)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 379)
[M::mem_pestat] mean and std.dev: (130.65, 73.62)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 481)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 90260 reads in 4.112 CPU sec, 3.891 real sec
[M::process] read 89904 sequences (10000124 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (1, 41293, 2, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (74, 114, 177)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 383)
[M::mem_pestat] mean and std.dev: (131.95, 73.80)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 486)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89832 reads in 4.280 CPU sec, 4.066 real sec
[M::process] read 89736 sequences (10000256 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (1, 41467, 0, 0)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 177)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 385)
[M::mem_pestat] mean and std.dev: (131.89, 74.12)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 489)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89904 reads in 4.245 CPU sec, 4.008 real sec
[M::process] read 89750 sequences (10000162 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (5, 41320, 0, 0)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (74, 114, 176)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 380)
[M::mem_pestat] mean and std.dev: (131.50, 73.39)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 482)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89736 reads in 4.173 CPU sec, 3.966 real sec
[M::process] read 89894 sequences (10000123 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (1, 41388, 0, 0)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (74, 114, 177)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 383)
[M::mem_pestat] mean and std.dev: (131.75, 73.52)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 486)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89750 reads in 4.207 CPU sec, 3.981 real sec
[M::process] read 90078 sequences (10000079 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (1, 41305, 2, 0)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 113, 176)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 382)
[M::mem_pestat] mean and std.dev: (131.11, 73.13)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 485)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89894 reads in 4.173 CPU sec, 3.963 real sec
[M::process] read 90206 sequences (10000130 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (1, 41351, 2, 1)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 175)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 379)
[M::mem_pestat] mean and std.dev: (130.69, 72.71)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 481)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 90078 reads in 4.190 CPU sec, 3.959 real sec
[M::process] read 89770 sequences (10000038 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 41444, 2, 3)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 113, 175)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 379)
[M::mem_pestat] mean and std.dev: (130.80, 73.37)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 481)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 90206 reads in 4.324 CPU sec, 4.104 real sec
[M::process] read 90086 sequences (10000123 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 41356, 0, 0)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (74, 114, 176)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 380)
[M::mem_pestat] mean and std.dev: (131.58, 73.04)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 482)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89770 reads in 4.188 CPU sec, 3.948 real sec
[M::process] read 89850 sequences (10000163 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 41364, 0, 1)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 175)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 379)
[M::mem_pestat] mean and std.dev: (130.95, 73.17)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 481)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 90086 reads in 4.208 CPU sec, 3.995 real sec
[M::process] read 89872 sequences (10000031 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (3, 41261, 1, 4)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (74, 114, 176)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 380)
[M::mem_pestat] mean and std.dev: (131.57, 73.42)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 482)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89850 reads in 4.276 CPU sec, 4.040 real sec
[M::process] read 89898 sequences (10000218 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 41328, 3, 3)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (74, 114, 176)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 380)
[M::mem_pestat] mean and std.dev: (131.51, 73.34)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 482)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89872 reads in 4.346 CPU sec, 4.126 real sec
[M::process] read 89964 sequences (10000231 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 41301, 0, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 177)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 385)
[M::mem_pestat] mean and std.dev: (132.24, 74.59)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 489)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89898 reads in 4.384 CPU sec, 4.111 real sec
[M::process] read 89606 sequences (10000030 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (1, 41320, 1, 1)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 176)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 382)
[M::mem_pestat] mean and std.dev: (131.50, 73.43)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 485)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89964 reads in 4.347 CPU sec, 4.124 real sec
[M::process] read 89894 sequences (10000185 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 41190, 1, 7)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (74, 115, 177)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 383)
[M::mem_pestat] mean and std.dev: (132.16, 73.66)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 486)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89606 reads in 4.179 CPU sec, 3.933 real sec
[M::process] read 89844 sequences (10000243 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 41378, 1, 5)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (74, 114, 177)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 383)
[M::mem_pestat] mean and std.dev: (131.73, 73.90)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 486)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89894 reads in 4.167 CPU sec, 3.964 real sec
[M::process] read 89880 sequences (10000099 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (1, 41404, 0, 0)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 176)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 382)
[M::mem_pestat] mean and std.dev: (131.42, 73.29)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 485)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89844 reads in 4.212 CPU sec, 3.977 real sec
[M::process] read 89846 sequences (10000180 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (4, 41274, 0, 3)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 177)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 385)
[M::mem_pestat] mean and std.dev: (132.08, 74.19)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 489)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89880 reads in 4.286 CPU sec, 4.059 real sec
[M::process] read 89864 sequences (10000145 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 41339, 2, 0)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (74, 114, 176)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 380)
[M::mem_pestat] mean and std.dev: (131.23, 73.14)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 482)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89846 reads in 4.290 CPU sec, 4.045 real sec
[M::process] read 89796 sequences (10000084 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (3, 41336, 0, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 177)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 385)
[M::mem_pestat] mean and std.dev: (132.06, 74.19)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 489)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89864 reads in 4.289 CPU sec, 4.073 real sec
[M::process] read 89890 sequences (10000173 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (1, 41210, 2, 3)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (74, 114, 177)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 383)
[M::mem_pestat] mean and std.dev: (131.75, 73.43)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 486)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89796 reads in 4.253 CPU sec, 4.014 real sec
[M::process] read 89770 sequences (10000019 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (1, 41398, 0, 1)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 177)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 385)
[M::mem_pestat] mean and std.dev: (132.09, 74.36)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 489)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89890 reads in 4.296 CPU sec, 4.092 real sec
[M::process] read 89986 sequences (10000037 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (4, 41207, 1, 0)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (74, 114, 176)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 380)
[M::mem_pestat] mean and std.dev: (131.57, 73.21)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 482)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89770 reads in 4.309 CPU sec, 4.074 real sec
[M::process] read 90022 sequences (10000007 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (1, 41421, 1, 3)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 177)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 385)
[M::mem_pestat] mean and std.dev: (131.70, 74.00)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 489)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89986 reads in 4.310 CPU sec, 4.079 real sec
[M::process] read 90012 sequences (10000106 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 41427, 2, 3)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 177)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 385)
[M::mem_pestat] mean and std.dev: (131.93, 74.50)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 489)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 90022 reads in 4.246 CPU sec, 4.007 real sec
[M::process] read 89958 sequences (10000226 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (3, 41396, 1, 1)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 176)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 382)
[M::mem_pestat] mean and std.dev: (131.42, 73.64)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 485)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 90012 reads in 4.345 CPU sec, 4.118 real sec
[M::process] read 90122 sequences (10000049 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 41449, 0, 1)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 176)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 382)
[M::mem_pestat] mean and std.dev: (131.48, 73.56)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 485)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89958 reads in 4.269 CPU sec, 4.027 real sec
[M::process] read 90084 sequences (10000157 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 41336, 2, 1)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 113, 176)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 382)
[M::mem_pestat] mean and std.dev: (131.27, 73.69)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 485)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 90122 reads in 4.388 CPU sec, 4.145 real sec
[M::process] read 89840 sequences (10000043 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (1, 41490, 0, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 113, 176)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 382)
[M::mem_pestat] mean and std.dev: (131.08, 73.59)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 485)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 90084 reads in 4.293 CPU sec, 4.051 real sec
[M::process] read 90270 sequences (10000018 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 41361, 1, 0)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (74, 114, 176)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 380)
[M::mem_pestat] mean and std.dev: (131.79, 73.56)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 482)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89840 reads in 4.117 CPU sec, 3.907 real sec
[M::process] read 89822 sequences (10000136 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (1, 41501, 0, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 113, 175)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 379)
[M::mem_pestat] mean and std.dev: (130.54, 73.25)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 481)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 90270 reads in 4.244 CPU sec, 4.026 real sec
[M::process] read 89884 sequences (10000175 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (1, 41176, 1, 0)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (74, 114, 176)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 380)
[M::mem_pestat] mean and std.dev: (131.35, 73.21)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 482)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89822 reads in 4.079 CPU sec, 3.861 real sec
[M::process] read 89976 sequences (10000035 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (1, 41341, 1, 5)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 178)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 388)
[M::mem_pestat] mean and std.dev: (132.32, 74.64)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 493)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89884 reads in 4.281 CPU sec, 4.069 real sec
[M::process] read 89810 sequences (10000141 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 41510, 2, 4)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 177)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 385)
[M::mem_pestat] mean and std.dev: (131.85, 74.11)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 489)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89976 reads in 4.193 CPU sec, 3.969 real sec
[M::process] read 90112 sequences (10000087 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 41310, 1, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 177)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 385)
[M::mem_pestat] mean and std.dev: (132.03, 74.17)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 489)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89810 reads in 4.382 CPU sec, 4.144 real sec
[M::process] read 90084 sequences (10000078 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (4, 41444, 1, 1)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 113, 176)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 382)
[M::mem_pestat] mean and std.dev: (131.14, 73.49)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 485)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 90112 reads in 4.297 CPU sec, 4.059 real sec
[M::process] read 90038 sequences (10000166 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (3, 41495, 0, 0)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 113, 177)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 385)
[M::mem_pestat] mean and std.dev: (131.87, 74.62)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 489)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 90084 reads in 4.235 CPU sec, 4.009 real sec
[M::process] read 89930 sequences (10000152 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (4, 41341, 1, 1)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 175)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 379)
[M::mem_pestat] mean and std.dev: (130.71, 72.62)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 481)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 90038 reads in 4.452 CPU sec, 4.231 real sec
[M::process] read 90062 sequences (10000005 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 41385, 0, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 176)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 382)
[M::mem_pestat] mean and std.dev: (131.40, 73.39)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 485)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89930 reads in 4.247 CPU sec, 4.011 real sec
[M::process] read 90068 sequences (10000118 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 41402, 1, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 177)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 385)
[M::mem_pestat] mean and std.dev: (131.66, 74.07)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 489)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 90062 reads in 4.335 CPU sec, 4.111 real sec
[M::process] read 89812 sequences (10000229 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 41430, 2, 4)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 176)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 382)
[M::mem_pestat] mean and std.dev: (131.46, 73.91)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 485)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 90068 reads in 4.293 CPU sec, 4.043 real sec
[M::process] read 89918 sequences (10000070 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (1, 41204, 1, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 177)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 385)
[M::mem_pestat] mean and std.dev: (132.10, 74.40)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 489)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89812 reads in 4.293 CPU sec, 4.083 real sec
[M::process] read 89850 sequences (10000095 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 41429, 0, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 177)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 385)
[M::mem_pestat] mean and std.dev: (132.11, 74.31)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 489)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89918 reads in 4.347 CPU sec, 4.101 real sec
[M::process] read 90026 sequences (10000259 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (3, 41213, 0, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (74, 114, 176)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 380)
[M::mem_pestat] mean and std.dev: (131.66, 73.46)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 482)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89850 reads in 4.344 CPU sec, 4.114 real sec
[M::process] read 90100 sequences (10000126 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (1, 41292, 2, 4)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 178)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 388)
[M::mem_pestat] mean and std.dev: (132.07, 74.41)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 493)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 90026 reads in 4.414 CPU sec, 4.155 real sec
[M::process] read 89976 sequences (10000201 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (1, 41393, 1, 0)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 113, 176)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 382)
[M::mem_pestat] mean and std.dev: (130.79, 73.27)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 485)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 90100 reads in 4.180 CPU sec, 3.974 real sec
[M::process] read 89920 sequences (10000163 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (3, 41338, 2, 3)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 178)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 388)
[M::mem_pestat] mean and std.dev: (132.35, 74.64)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 493)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89976 reads in 4.245 CPU sec, 4.021 real sec
[M::process] read 89982 sequences (10000087 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 41353, 0, 1)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (74, 114, 175)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 377)
[M::mem_pestat] mean and std.dev: (130.89, 72.59)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 478)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89920 reads in 4.243 CPU sec, 4.034 real sec
[M::process] read 90178 sequences (10000103 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (1, 41282, 2, 1)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 177)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 385)
[M::mem_pestat] mean and std.dev: (131.90, 74.03)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 489)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89982 reads in 4.273 CPU sec, 4.040 real sec
[M::process] read 89992 sequences (10000093 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (1, 41464, 2, 1)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 113, 177)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 385)
[M::mem_pestat] mean and std.dev: (131.49, 74.13)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 489)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 90178 reads in 4.477 CPU sec, 4.252 real sec
[M::process] read 89820 sequences (10000057 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (1, 41464, 2, 1)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 177)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 385)
[M::mem_pestat] mean and std.dev: (131.62, 73.99)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 489)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89992 reads in 4.339 CPU sec, 4.092 real sec
[M::process] read 90044 sequences (10000177 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (4, 41280, 2, 0)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (74, 114, 178)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 386)
[M::mem_pestat] mean and std.dev: (132.27, 74.38)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 490)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89820 reads in 4.283 CPU sec, 4.046 real sec
[M::process] read 89936 sequences (10000124 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 41465, 2, 1)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 176)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 382)
[M::mem_pestat] mean and std.dev: (131.28, 73.66)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 485)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 90044 reads in 4.295 CPU sec, 4.080 real sec
[M::process] read 89820 sequences (10000130 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (3, 41300, 1, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 176)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 382)
[M::mem_pestat] mean and std.dev: (131.40, 73.42)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 485)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89936 reads in 4.230 CPU sec, 4.020 real sec
[M::process] read 90080 sequences (10000212 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (1, 41254, 1, 1)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 176)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 382)
[M::mem_pestat] mean and std.dev: (131.65, 73.73)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 485)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89820 reads in 4.247 CPU sec, 3.995 real sec
[M::process] read 89966 sequences (10000136 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (3, 41423, 4, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 113, 176)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 382)
[M::mem_pestat] mean and std.dev: (131.20, 73.48)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 485)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 90080 reads in 4.180 CPU sec, 3.957 real sec
[M::process] read 89860 sequences (10000227 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (3, 41341, 1, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 177)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 385)
[M::mem_pestat] mean and std.dev: (131.93, 74.43)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 489)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89966 reads in 4.188 CPU sec, 3.960 real sec
[M::process] read 89938 sequences (10000039 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (4, 41240, 0, 1)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 115, 177)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 385)
[M::mem_pestat] mean and std.dev: (132.07, 74.07)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 489)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89860 reads in 4.335 CPU sec, 4.101 real sec
[M::process] read 89790 sequences (10000092 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (4, 41284, 0, 0)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 177)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 385)
[M::mem_pestat] mean and std.dev: (131.87, 74.23)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 489)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89938 reads in 4.219 CPU sec, 3.993 real sec
[M::process] read 90028 sequences (10000008 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (5, 41168, 1, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 176)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 382)
[M::mem_pestat] mean and std.dev: (131.17, 73.04)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 485)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89790 reads in 4.322 CPU sec, 4.048 real sec
[M::process] read 90136 sequences (10000285 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (1, 41403, 2, 5)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 176)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 382)
[M::mem_pestat] mean and std.dev: (131.40, 73.71)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 485)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 90028 reads in 4.305 CPU sec, 4.064 real sec
[M::process] read 89960 sequences (10000109 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (4, 41440, 3, 1)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 113, 175)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 379)
[M::mem_pestat] mean and std.dev: (130.69, 73.15)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 481)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 90136 reads in 4.168 CPU sec, 3.959 real sec
[M::process] read 90008 sequences (10000062 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (3, 41369, 2, 1)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 175)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 379)
[M::mem_pestat] mean and std.dev: (130.83, 72.83)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 481)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89960 reads in 4.300 CPU sec, 4.052 real sec
[M::process] read 89886 sequences (10000052 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (1, 41355, 2, 3)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 176)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 382)
[M::mem_pestat] mean and std.dev: (131.54, 73.95)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 485)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 90008 reads in 4.348 CPU sec, 4.092 real sec
[M::process] read 89954 sequences (10000056 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 41256, 2, 3)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 177)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 385)
[M::mem_pestat] mean and std.dev: (131.79, 73.99)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 489)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89886 reads in 4.247 CPU sec, 3.999 real sec
[M::process] read 90006 sequences (10000129 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 41319, 0, 3)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 176)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 382)
[M::mem_pestat] mean and std.dev: (131.31, 73.40)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 485)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89954 reads in 4.330 CPU sec, 4.111 real sec
[M::process] read 89988 sequences (10000157 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (1, 41366, 1, 3)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 177)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 385)
[M::mem_pestat] mean and std.dev: (131.93, 74.41)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 489)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 90006 reads in 4.234 CPU sec, 4.000 real sec
[M::process] read 89938 sequences (10000241 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 41466, 0, 1)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 176)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 382)
[M::mem_pestat] mean and std.dev: (131.35, 73.52)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 485)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89988 reads in 4.308 CPU sec, 4.092 real sec
[M::process] read 15630 sequences (1733230 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (1, 41393, 0, 0)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 114, 176)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 382)
[M::mem_pestat] mean and std.dev: (131.25, 73.20)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 485)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 89938 reads in 4.224 CPU sec, 4.025 real sec
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 7205, 0, 0)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 113, 174)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 376)
[M::mem_pestat] mean and std.dev: (129.20, 70.66)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 477)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 15630 reads in 0.892 CPU sec, 0.794 real sec
[main] Version: 0.7.18-r1243-dirty
[main] CMD: bwa mem /bios-store5/lyt/test_sample/sample3//spades_result_unique_new/assembly.fasta /bios-store5/lyt/test_sample/sample3//R1_with_barcode_new.fastq /bios-store5/lyt/test_sample/sample3//R2_with_barcode_new.fastq
[main] Real time: 707.293 sec; CPU: 746.262 sec
mkdir: 无法创建目录"/bios-store5/lyt/test_sample/sample3//spades_result_unique_new/get_bam_info/": 文件已存在
1109 out of 1179 sequences from /bios-store5/lyt/test_sample/sample3//spades_result_unique_new/scaffolds.fasta were not included in the dataset /bios-store5/lyt/test_sample/sample3//spades_result_unique_new/filter_scaffolds.fasta.
Remaining 70 seqeunces will be used for further processing steps
/bios-store1/home/yutongli/.conda/envs/try_619_new/lib/python3.5/site-packages/sklearn/feature_extraction/text.py:1466: RuntimeWarning: divide by zero encountered in true_divide
  idf = np.log(n_samples / df) + 1
Importing sequences
Imported  70  sequences
Calculating kmer frequencies using kmer 5
Transforming kmer frequencies
Finished transforming, saving transformed values
Predicting labels using kmer 5  frequencies
Calculating kmer frequencies using kmer 6
Transforming kmer frequencies
Finished transforming, saving transformed values
Predicting labels using kmer 6  frequencies
Calculating kmer frequencies using kmer 7
Transforming kmer frequencies
Finished transforming, saving transformed values
Predicting labels using kmer 7  frequencies
Voting...
Filtering by probability threshold 0.7

Resulting plasmid sequences prediction:
   plasmid  unclassified  chromosome
0       24            17          29

Resulting taxonomical assignment:
   Firmicutes  Proteobacteria  unclassified
0          42               2            26

Outputting fasta files with classified sequences
total_number_of_read:8098892
reads_with_barcode_all_Gs:107
all_reads:8098892
unique_barcode:3992343
more_than_three:556031
read_with_more_than_three:2194951
barcode_catagory_count:5504173
125070
error_barcode_num:131370
final_reads_num:7878908
final_correct_barcode_number:1548856
n=35
0.4845824870353362 0.9043404591325251
Traceback (most recent call last):
  File "/bios-store5/lyt/python_demo_try/SeriesAnalysis/main.py", line 474, in <module>
    bwaAndSeparate(args,n)
  File "/bios-store5/lyt/python_demo_try/SeriesAnalysis/main.py", line 286, in bwaAndSeparate
    my_class1.separate_and_clear(n)
  File "/bios-store5/lyt/python_demo_try/SeriesAnalysis/DataFilter.py", line 51, in separate_and_clear
    sns.kdeplot(logy)
  File "/bios-store1/home/yutongli/.conda/envs/try_619_new/lib/python3.5/site-packages/seaborn/distributions.py", line 661, in kdeplot
    ax = plt.gca()
  File "/bios-store1/home/yutongli/.conda/envs/try_619_new/lib/python3.5/site-packages/matplotlib/pyplot.py", line 935, in gca
    return gcf().gca(**kwargs)
  File "/bios-store1/home/yutongli/.conda/envs/try_619_new/lib/python3.5/site-packages/matplotlib/pyplot.py", line 578, in gcf
    return figure()
  File "/bios-store1/home/yutongli/.conda/envs/try_619_new/lib/python3.5/site-packages/matplotlib/pyplot.py", line 525, in figure
    **kwargs)
  File "/bios-store1/home/yutongli/.conda/envs/try_619_new/lib/python3.5/site-packages/matplotlib/backend_bases.py", line 3218, in new_figure_manager
    return cls.new_figure_manager_given_figure(num, fig)
  File "/bios-store1/home/yutongli/.conda/envs/try_619_new/lib/python3.5/site-packages/matplotlib/backends/_backend_tk.py", line 1008, in new_figure_manager_given_figure
    window = Tk.Tk(className="matplotlib")
  File "/bios-store1/home/yutongli/.conda/envs/try_619_new/lib/python3.5/tkinter/__init__.py", line 1876, in __init__
    self.tk = _tkinter.create(screenName, baseName, className, interactive, wantobjects, useTk, sync, use)
_tkinter.TclError: couldn't connect to display "localhost:19.0"
